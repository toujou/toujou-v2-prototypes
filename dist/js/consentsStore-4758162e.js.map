{"version":3,"file":"consentsStore-4758162e.js","sources":["../../node_modules/redux/es/redux.js","../../src/components/copied/toujou-consent-widget/store-persistence.js","../../src/components/copied/toujou-consent-widget/actions/consent-actions.js","../../src/components/copied/toujou-consent-widget/reducers/consent-reducers.js","../../src/components/copied/toujou-consent-widget/consentsStore.js"],"sourcesContent":["import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';\n\n/**\n * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js\n *\n * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes\n * during build.\n * @param {number} code\n */\nfunction formatProdErrorMessage(code) {\n  return \"Minified Redux error #\" + code + \"; visit https://redux.js.org/Errors?code=\" + code + \" for the full message or \" + 'use the non-minified dev environment for full errors. ';\n}\n\n// Inlined version of the `symbol-observable` polyfill\nvar $$observable = (function () {\n  return typeof Symbol === 'function' && Symbol.observable || '@@observable';\n})();\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of\nfunction miniKindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n  var type = typeof val;\n\n  switch (type) {\n    case 'boolean':\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'function':\n      {\n        return type;\n      }\n  }\n\n  if (Array.isArray(val)) return 'array';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  var constructorName = ctorName(val);\n\n  switch (constructorName) {\n    case 'Symbol':\n    case 'Promise':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Map':\n    case 'Set':\n      return constructorName;\n  } // other\n\n\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n}\n\nfunction ctorName(val) {\n  return typeof val.constructor === 'function' ? val.constructor.name : null;\n}\n\nfunction isError(val) {\n  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';\n}\n\nfunction kindOf(val) {\n  var typeOfVal = typeof val;\n\n  if (process.env.NODE_ENV !== 'production') {\n    typeOfVal = miniKindOf(val);\n  }\n\n  return typeOfVal;\n}\n\n/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(0) : 'It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(1) : \"Expected the enhancer to be a function. Instead, received: '\" + kindOf(enhancer) + \"'\");\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(2) : \"Expected the root reducer to be a function. Instead, received: '\" + kindOf(reducer) + \"'\");\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(3) : 'You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(4) : \"Expected the listener to be a function. Instead, received: '\" + kindOf(listener) + \"'\");\n    }\n\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(5) : 'You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(6) : 'You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(7) : \"Actions must be plain objects. Instead, the actual type was: '\" + kindOf(action) + \"'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.\");\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(8) : 'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.');\n    }\n\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(9) : 'Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(10) : \"Expected the nextReducer to be a function. Instead, received: '\" + kindOf(nextReducer));\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(11) : \"Expected the observer to be an object. Instead, received: '\" + kindOf(observer) + \"'\");\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nvar legacy_createStore = createStore;\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + kindOf(inputState) + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(12) : \"The slice reducer for key \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(13) : \"The slice reducer for key \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle '\" + ActionTypes.INIT + \"' or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var actionType = action && action.type;\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(14) : \"When called with an action of type \" + (actionType ? \"\\\"\" + String(actionType) + \"\\\"\" : '(unknown type)') + \", the slice reducer for key \\\"\" + _key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\");\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(16) : \"bindActionCreators expected an object or a function, but instead received: '\" + kindOf(actionCreators) + \"'. \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(15) : 'Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread(_objectSpread({}, store), {}, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore, legacy_createStore };\n","// These functions are used so we can save and read our toujou redux state\n// using session and localStorage (so the state is persistent)\n\nexport const cookieStorage = {\n\n  /**\n   * @param {string} key\n   * @param {string} value\n   */\n  setItem(key, value) {\n    document.cookie = `${key}=${value};path=/;`;\n  },\n\n  /**\n   * @param {string} key\n   * @return {string|null}\n   */\n  getItem(key) {\n    const nameEQ = `${key}=`;\n    const ca = document.cookie.split(';');\n    for (let i = 0, max = ca.length; i < max; i++) {\n      let c = ca[i];\n      while (c.charAt(0) === ' ') {\n        c = c.substring(1, c.length);\n      }\n      if (c.indexOf(nameEQ) === 0) {\n        return c.substring(nameEQ.length, c.length);\n      }\n    }\n    return null;\n  },\n};\n\n/**\n * Save the relevant properties of the new state into the correct storage\n *    'storageType': must be either 'sessionStorage' or 'localStorage'\n *    'itemName': String with the name of the item we want to save the state into,\n *         ex: 'consentsState'\n */\nconst saveStateToStorage = (state, storageType, itemName) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    storageType.setItem(itemName, serializedState);\n    return;\n  } catch (error) {\n    console.error(`There was an error while saving the consents data to storage: Error: ${error}`);\n  }\n};\n\n/**\n * Get correct persisted state for an item from the correct storage\n *    storeType: must be 'sessionStorate' or 'localStorage'\n *    itemName\" String with the name of the item we want to get from Storage, ex: 'consentsState'\n */\nconst loadPersistedState = (storeType, itemName) => {\n  try {\n    const serializedState = storeType.getItem(itemName);\n    if (serializedState === null) {\n      return {};\n    }\n    return JSON.parse(serializedState);\n  } catch (error) {\n    console.error(`There was a problem loading the consents data from storage. Error: ${error}`);\n    return {};\n  }\n};\n\n/**\n * Get the persisted state from storage.\n * It calls functions to get state from the session and from the local storage\n * and then return the merge of the two results\n */\nexport const toujouLoadStorageState = () => {\n  const sessionStorageData = loadPersistedState(cookieStorage, 'consentsState');\n  const localStorageData = loadPersistedState(localStorage, 'consentsState');\n  const finalData = {};\n  finalData.consents = { ...sessionStorageData.consents, ...localStorageData.consents };\n  return finalData;\n};\n\n/**\n * Because the consents may have different lifetimes,\n * we need to check which consent goes to the session or localStorage.\n * We then call the functions that will save it to the correct storage\n */\nconst prepareConsentsDataToSave = (consentsData) => {\n  const dataToSaveOnSessionStorage = {};\n  const dataToSaveOnLocalStorage = {};\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in consentsData) {\n    if (key === 'consentBoxDismissed') { // consentBoxDismissed\n      dataToSaveOnLocalStorage[key] = consentsData[key];\n    } else if (key === 'tracking' && consentsData[key].consentLifetime === 0) { // tracking: session\n      dataToSaveOnSessionStorage[key] = consentsData[key];\n    } else if (key === 'tracking' && consentsData[key].consentLifetime > 0) { // session: local\n      dataToSaveOnLocalStorage[key] = consentsData[key];\n    } else if (consentsData[key].consentLifetime === 0) { // externals: session\n      dataToSaveOnSessionStorage[key] = consentsData[key];\n    } else if (consentsData[key].consentLifetime > 0) { // externals: LOCAL\n      dataToSaveOnLocalStorage[key] = consentsData[key];\n    }\n  }\n\n  saveStateToStorage({ consents: dataToSaveOnSessionStorage }, cookieStorage, 'consentsState');\n  saveStateToStorage({ consents: dataToSaveOnLocalStorage }, localStorage, 'consentsState');\n};\n\n/**\n * Handle the data we want to save on session or local storage\n * At the moment we want to make sure we only save the consents data\n * This function gets the 'state' from the consents reducer, just before it returns the new state\n */\nexport const handlePersistanceDataToSave = (state) => {\n  // eslint-disable-next-line no-restricted-syntax,guard-for-in\n  for (const key in state) {\n    if (key !== 'consents') {\n      console.error('Unknown data \"key\" found while saving to session / local Storage');\n      return;\n    }\n\n    prepareConsentsDataToSave(state.consents);\n  }\n};\n","export const CLEAR_CONSENT_TYPE_DATA = 'CLEAR_CONSENT_TYPE_DATA';\nexport const SAVE_ALL_CONSENTS = 'SAVE_ALL_CONSENTS';\nexport const SAVE_SINGLE_CONSENT = 'SAVE_SINGLE_CONSENT';\nexport const DISMISS_CONSENT_BOX = 'DISMISS_CONSENT_BOX';\nexport const UNDISMISS_CONSENT_BOX = 'UNDISMISS_CONSENT_BOX';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const INITIAL_STATE = {\n  consents: {\n    consentBoxDismissed: false,\n  },\n};\n\nexport const clearConsentTypeData = (consentType) => ({\n  type: CLEAR_CONSENT_TYPE_DATA,\n  payload: consentType,\n});\n\nexport const saveAllConsents = (newConsents) => ({\n  type: SAVE_ALL_CONSENTS,\n  payload: newConsents,\n});\n\nexport const saveSingleConsent = (consentType, consentData) => ({\n  type: SAVE_SINGLE_CONSENT,\n  payload: { consentType, consentData },\n});\n\nexport const dismissConsentBox = () => ({\n  type: DISMISS_CONSENT_BOX,\n});\n\nexport const undismissConsentBox = () => ({\n  type: UNDISMISS_CONSENT_BOX,\n});\n","import { handlePersistanceDataToSave } from '../store-persistence';\nimport {\n  INITIAL_STATE,\n  CLEAR_CONSENT_TYPE_DATA,\n  DISMISS_CONSENT_BOX,\n  SAVE_ALL_CONSENTS,\n  SAVE_SINGLE_CONSENT,\n  UNDISMISS_CONSENT_BOX,\n} from '../actions/consent-actions';\n\n// eslint-disable-next-line import/prefer-default-export\nfunction consentReducers(state, action) {\n  // eslint-disable-next-line default-case\n  switch (action.type) {\n    case CLEAR_CONSENT_TYPE_DATA: {\n      const newClearedConsents = { ...state.consents };\n      delete newClearedConsents[action.payload];\n      return {\n        ...state,\n        consents: newClearedConsents,\n      };\n    }\n\n    case SAVE_ALL_CONSENTS: {\n      const newAllConsents = { ...state.consents, ...action.payload };\n      return {\n        ...state,\n        consents: newAllConsents,\n      };\n    }\n\n    case SAVE_SINGLE_CONSENT: {\n      const newConsentsWithSingleConsentChange = { ...state.consents };\n      // eslint-disable-next-line max-len\n      newConsentsWithSingleConsentChange[action.payload.consentType] = { ...action.payload.consentData };\n      return {\n        ...state,\n        consents: newConsentsWithSingleConsentChange,\n      };\n    }\n\n    case DISMISS_CONSENT_BOX: {\n      const newDismissedBoxConsents = { ...state.consents };\n      newDismissedBoxConsents.consentBoxDismissed = true;\n      return {\n        ...state,\n        consents: newDismissedBoxConsents,\n      };\n    }\n\n    case UNDISMISS_CONSENT_BOX: {\n      const newUndismissedBoxConsents = { ...state.consents };\n      newUndismissedBoxConsents.consentBoxDismissed = false;\n      return {\n        ...state,\n        consents: newUndismissedBoxConsents,\n      };\n    }\n  }\n\n  return state;\n}\n\nlet initialStatePushedToDataLayer = false;\n\nexport default function consentReducersExport(state = INITIAL_STATE, action) {\n  const reducedState = consentReducers(state, action);\n  handlePersistanceDataToSave(reducedState);\n\n  if (typeof window.dataLayer === 'object' && (!initialStatePushedToDataLayer || (reducedState.consents.consentBoxDismissed !== undefined && reducedState.consents.consentBoxDismissed))) {\n    window.dataLayer.push({ event: 'consent-changed', ...reducedState.consents });\n    initialStatePushedToDataLayer = true;\n  }\n\n  return reducedState;\n}\n","import { createStore, compose } from 'redux';\nimport consentReducer from './reducers/consent-reducers';\nimport { toujouLoadStorageState } from './store-persistence';\n\nfunction configureStore() {\n  // eslint-disable-next-line no-underscore-dangle,max-len,no-mixed-operators\n  const composeEnhancers = (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ trace: true, traceLimit: 25 }) || compose);\n  const composedEnhancers = composeEnhancers();\n  const persistedState = toujouLoadStorageState();\n\n  return createStore(\n    consentReducer,\n    persistedState,\n    composedEnhancers,\n  );\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const consentsStore = configureStore();\n"],"names":["formatProdErrorMessage","code","$$observable","randomString","ActionTypes","isPlainObject","obj","proto","createStore","reducer","preloadedState","enhancer","_ref2","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","getState","subscribe","listener","isSubscribed","index","dispatch","action","listeners","i","replaceReducer","nextReducer","observable","_ref","outerSubscribe","observer","observeState","unsubscribe","compose","_len","funcs","_key","arg","a","b","cookieStorage","key","value","nameEQ","ca","max","c","saveStateToStorage","state","storageType","itemName","serializedState","error","loadPersistedState","storeType","toujouLoadStorageState","sessionStorageData","localStorageData","finalData","prepareConsentsDataToSave","consentsData","dataToSaveOnSessionStorage","dataToSaveOnLocalStorage","handlePersistanceDataToSave","CLEAR_CONSENT_TYPE_DATA","SAVE_ALL_CONSENTS","SAVE_SINGLE_CONSENT","DISMISS_CONSENT_BOX","UNDISMISS_CONSENT_BOX","INITIAL_STATE","clearConsentTypeData","consentType","saveAllConsents","newConsents","saveSingleConsent","consentData","dismissConsentBox","undismissConsentBox","consentReducers","newClearedConsents","newAllConsents","newConsentsWithSingleConsentChange","newDismissedBoxConsents","newUndismissedBoxConsents","initialStatePushedToDataLayer","consentReducersExport","reducedState","configureStore","composedEnhancers","persistedState","consentReducer","consentsStore"],"mappings":"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"}