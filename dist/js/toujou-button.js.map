{"version":3,"file":"toujou-button.js","sources":["../../src/components/toujou-button/types/toujou-button.types.ts","../../src/components/toujou-button/toujou-button.ts"],"sourcesContent":["export enum ToujouButtonVariant {\n    PRIMARY ='primary',\n    SECONDARY = 'secondary',\n    FONT = 'font'\n}\n\nexport enum ToujouButtonType {\n    DEFAULT = 'default',\n    BORDER = 'border',\n    GHOST = 'ghost'\n}\n\nexport enum ToujouButtonSize {\n    TINY = 'tiny',\n    SMALL = 'small',\n    NORMAL = 'normal',\n    LARGE = 'large'\n}","import { ToujouButtonVariant, ToujouButtonType, ToujouButtonSize } from \"./types/toujou-button.types\";\n\nexport class ToujouButton extends HTMLButtonElement {\n\n    defaultButtonVariant: string = ToujouButtonVariant.PRIMARY;\n    defaultButtonType: string = ToujouButtonType.DEFAULT;\n    defaultButtonSize: string = ToujouButtonSize.NORMAL\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        this._checkRequiredAttributes()\n    }\n\n    private _checkRequiredAttributes() {\n        // Button variant\n        const variant = this.getAttribute('button-variant');\n        if (!variant) {\n            this.setAttribute('button-variant', this.defaultButtonVariant);\n        } else if (!Object.values(ToujouButtonVariant).includes(variant as ToujouButtonVariant)) {\n            console.warn(`TOUJOU: Invalid button-variant value, falling back to default: \"${this.defaultButtonVariant}\"`)\n            this.setAttribute('button-variant', this.defaultButtonVariant);\n        }\n\n        // Button size\n        const size = this.getAttribute('button-size');\n        if (!size) {\n            this.setAttribute('button-size', this.defaultButtonSize);\n        } else if (!Object.values(ToujouButtonSize).includes(size as ToujouButtonSize)) {\n            console.warn(`TOUJOU: Invalid button-size value, falling back to default: \"${this.defaultButtonSize}\"`)\n            this.setAttribute('button-size', this.defaultButtonSize);\n        }\n\n        // Button size\n        const type = this.getAttribute('button-type');\n        if (!type) {\n            this.setAttribute('button-type', this.defaultButtonType);\n        } else if (!Object.values(ToujouButtonType).includes(type as ToujouButtonType)) {\n            console.warn(`TOUJOU: Invalid button-type value, falling back to default: \"${this.defaultButtonType}\"`)\n            this.setAttribute('button-size', this.defaultButtonType);\n        }\n    }\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'toujou-button': ToujouButton\n    }\n}\n\ncustomElements.define('toujou-button', ToujouButton, { extends: 'button' });\n"],"names":["ToujouButtonVariant","ToujouButtonType","ToujouButtonSize","ToujouButton","variant","size","type"],"mappings":"AAAY,IAAAA,GAAAA,IACRA,EAAA,QAAS,UACTA,EAAA,UAAY,YACZA,EAAA,KAAO,OAHCA,IAAAA,GAAA,CAAA,CAAA,EAMAC,GAAAA,IACRA,EAAA,QAAU,UACVA,EAAA,OAAS,SACTA,EAAA,MAAQ,QAHAA,IAAAA,GAAA,CAAA,CAAA,EAMAC,GAAAA,IACRA,EAAA,KAAO,OACPA,EAAA,MAAQ,QACRA,EAAA,OAAS,SACTA,EAAA,MAAQ,QAJAA,IAAAA,GAAA,CAAA,CAAA,ECVL,MAAMC,UAAqB,iBAAkB,CAMhD,aAAc,CACJ,QALV,KAAA,qBAA+BH,EAAoB,QACnD,KAAA,kBAA4BC,EAAiB,QAC7C,KAAA,kBAA4BC,EAAiB,MAI7C,CAEA,mBAAoB,CAChB,KAAK,yBAAyB,CAClC,CAEQ,0BAA2B,CAEzB,MAAAE,EAAU,KAAK,aAAa,gBAAgB,EAC7CA,EAEO,OAAO,OAAOJ,CAAmB,EAAE,SAASI,CAA8B,IAC1E,QAAA,KAAK,mEAAmE,KAAK,uBAAuB,EACvG,KAAA,aAAa,iBAAkB,KAAK,oBAAoB,GAHxD,KAAA,aAAa,iBAAkB,KAAK,oBAAoB,EAO3D,MAAAC,EAAO,KAAK,aAAa,aAAa,EACvCA,EAEO,OAAO,OAAOH,CAAgB,EAAE,SAASG,CAAwB,IACjE,QAAA,KAAK,gEAAgE,KAAK,oBAAoB,EACjG,KAAA,aAAa,cAAe,KAAK,iBAAiB,GAHlD,KAAA,aAAa,cAAe,KAAK,iBAAiB,EAOrD,MAAAC,EAAO,KAAK,aAAa,aAAa,EACvCA,EAEO,OAAO,OAAOL,CAAgB,EAAE,SAASK,CAAwB,IACjE,QAAA,KAAK,gEAAgE,KAAK,oBAAoB,EACjG,KAAA,aAAa,cAAe,KAAK,iBAAiB,GAHlD,KAAA,aAAa,cAAe,KAAK,iBAAiB,CAK/D,CACJ,CAQA,eAAe,OAAO,gBAAiBH,EAAc,CAAE,QAAS,SAAU"}