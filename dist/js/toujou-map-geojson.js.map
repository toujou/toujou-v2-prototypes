{"version":3,"file":"toujou-map-geojson.js","sources":["../../node_modules/@toujou/toujou-map/dist/toujou-map-geojson.js"],"sourcesContent":["import {UpdatingElement}from'lit';// eslint-disable-next-line no-unused-vars\nconst mapStyleLoadedMap = new WeakMap();\n\n/**\n * Element to load geojson data into the map.\n *\n * @element toujou-map-geojson\n */\nclass ToujouMapGeojson extends UpdatingElement {\n  static get is() { return 'toujou-map-geojson'; }\n\n  static get properties() {\n    return {\n      sourceId: {\n        type: String,\n        attribute: 'source-id',\n      },\n\n      sourceData: {\n        type: Object,\n        attribute: 'source-data',\n      },\n\n      /**\n       * Address of the .geojson file with the data.\n       *\n       * @String\n       */\n      sourceUrl: {\n        type: String,\n        attribute: 'source-url',\n      },\n\n      /**\n       * Define the maximal zoom at which the data in the geojson will be visible.\n       * It must be a number between 0 and 20.\n       * Default is '18'\n       *\n       * @Number\n       */\n      maxZoom: {\n        type: Number,\n        attribute: 'max-zoom',\n      },\n\n      buffer: {\n        type: Number,\n      },\n\n      tolerance: {\n        type: Number,\n      },\n\n      /**\n       * Define if the map can group features into clusters or not.\n       * Default value is 'true'\n       *\n       * @Boolean\n       */\n      cluster: {\n        type: Boolean,\n      },\n\n      /**\n       * Define the size of the clusters.\n       * Default is '50'\n       *\n       * @Number\n       */\n      clusterRadius: {\n        type: Number,\n        attribute: 'cluster-radius',\n      },\n\n      /**\n       * Maximal zoom at which the clusters will be visible.\n       * Must be a number between 0 and 20.\n       * Default is the map's own 'maxzoom - 1'\n       * @Number\n       */\n      clusterMaxZoom: {\n        type: Number,\n        attribute: 'cluster-max-zoom',\n      },\n    };\n  }\n\n  set map(map) {\n    if (map !== this._map) {\n      this._map && this.removeSource();\n      this._map = map;\n      if (map) {\n        if (!this.map.isStyleLoaded()) {\n          this.map.once('load', () => this.initSource());\n        } else {\n          this.initSource();\n        }\n      }\n    }\n  }\n\n  get map() {\n    return this._map;\n  }\n\n  set sourceData(sourceData) {\n    this.source && this.source.setData(sourceData);\n    this.data = sourceData;\n  }\n\n  get sourceData() {\n    return typeof this.data === 'object' ? this.data : null;\n  }\n\n  set sourceUrl(sourceUrl) {\n    // eslint-disable-next-line no-unused-expressions\n    this.source && this.source.setData(sourceUrl);\n    this.data = sourceUrl;\n  }\n\n  get sourceUrl() {\n    return typeof this.data === 'string' ? this.data : null;\n  }\n\n  get clusterConf() {\n    if (this.cluster) {\n      return {\n        cluster: true,\n        clusterRadius: this.clusterRadius,\n        clusterMaxZoom: this.clusterMaxZoom || this.maxZoom - 1,\n      };\n    }\n    return {};\n  }\n\n  constructor(props) {\n    super(props);\n    this.maxZoom = 18;\n    this.buffer = 128;\n    this.tolerance = 0.375;\n    this.clusterRadius = 50;\n    this.clusterMaxZoom = null;\n    this._map = null;\n    this.source = null;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.dispatchEvent(new CustomEvent('toujou-map-element-attached', { detail: this, bubbles: true, composed: true }));\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.map && this.removeSource();\n  }\n\n  /**\n   * Initialize the geojson's source\n   * the \"this.data\" property needs to be geojson data\n   */\n  // eslint-disable-next-line consistent-return\n  initSource() {\n    this.map.addSource(\n      this.sourceId,\n      {\n        type: 'geojson',\n        data: this.data,\n        maxzoom: this.maxZoom,\n        buffer: this.buffer,\n        tolerance: this.tolerance,\n        ...this.clusterConf,\n      },\n    );\n    this.source = this.map.getSource(this.sourceId);\n  }\n\n  removeSource() {\n    if (this.map.getSource(this.sourceId)) {\n      this.map.removeSource(this.sourceId);\n    }\n  }\n}\n\ncustomElements.define(ToujouMapGeojson.is, ToujouMapGeojson);//# sourceMappingURL=toujou-map-geojson.js.map\n"],"names":["ToujouMapGeojson","UpdatingElement","map","sourceData","sourceUrl","props"],"mappings":"8CAQA,MAAMA,UAAyBC,CAAgB,CAC7C,WAAW,IAAK,CAAE,MAAO,oBAAuB,CAEhD,WAAW,YAAa,CACtB,MAAO,CACL,SAAU,CACR,KAAM,OACN,UAAW,WACZ,EAED,WAAY,CACV,KAAM,OACN,UAAW,aACZ,EAOD,UAAW,CACT,KAAM,OACN,UAAW,YACZ,EASD,QAAS,CACP,KAAM,OACN,UAAW,UACZ,EAED,OAAQ,CACN,KAAM,MACP,EAED,UAAW,CACT,KAAM,MACP,EAQD,QAAS,CACP,KAAM,OACP,EAQD,cAAe,CACb,KAAM,OACN,UAAW,gBACZ,EAQD,eAAgB,CACd,KAAM,OACN,UAAW,kBACZ,CACP,CACG,CAED,IAAI,IAAIC,EAAK,CACPA,IAAQ,KAAK,OACf,KAAK,MAAQ,KAAK,eAClB,KAAK,KAAOA,EACRA,IACG,KAAK,IAAI,gBAGZ,KAAK,WAAU,EAFf,KAAK,IAAI,KAAK,OAAQ,IAAM,KAAK,WAAU,CAAE,GAMpD,CAED,IAAI,KAAM,CACR,OAAO,KAAK,IACb,CAED,IAAI,WAAWC,EAAY,CACzB,KAAK,QAAU,KAAK,OAAO,QAAQA,CAAU,EAC7C,KAAK,KAAOA,CACb,CAED,IAAI,YAAa,CACf,OAAO,OAAO,KAAK,MAAS,SAAW,KAAK,KAAO,IACpD,CAED,IAAI,UAAUC,EAAW,CAEvB,KAAK,QAAU,KAAK,OAAO,QAAQA,CAAS,EAC5C,KAAK,KAAOA,CACb,CAED,IAAI,WAAY,CACd,OAAO,OAAO,KAAK,MAAS,SAAW,KAAK,KAAO,IACpD,CAED,IAAI,aAAc,CAChB,OAAI,KAAK,QACA,CACL,QAAS,GACT,cAAe,KAAK,cACpB,eAAgB,KAAK,gBAAkB,KAAK,QAAU,CAC9D,EAEW,EACR,CAED,YAAYC,EAAO,CACjB,MAAMA,CAAK,EACX,KAAK,QAAU,GACf,KAAK,OAAS,IACd,KAAK,UAAY,KACjB,KAAK,cAAgB,GACrB,KAAK,eAAiB,KACtB,KAAK,KAAO,KACZ,KAAK,OAAS,IACf,CAED,mBAAoB,CAClB,MAAM,kBAAiB,EACvB,KAAK,cAAc,IAAI,YAAY,8BAA+B,CAAE,OAAQ,KAAM,QAAS,GAAM,SAAU,EAAI,CAAE,CAAC,CACnH,CAED,sBAAuB,CACrB,MAAM,qBAAoB,EAC1B,KAAK,KAAO,KAAK,cAClB,CAOD,YAAa,CACX,KAAK,IAAI,UACP,KAAK,SACL,CACE,KAAM,UACN,KAAM,KAAK,KACX,QAAS,KAAK,QACd,OAAQ,KAAK,OACb,UAAW,KAAK,UAChB,GAAG,KAAK,WACT,CACP,EACI,KAAK,OAAS,KAAK,IAAI,UAAU,KAAK,QAAQ,CAC/C,CAED,cAAe,CACT,KAAK,IAAI,UAAU,KAAK,QAAQ,GAClC,KAAK,IAAI,aAAa,KAAK,QAAQ,CAEtC,CACH,CAEA,eAAe,OAAOL,EAAiB,GAAIA,CAAgB"}