{"version":3,"file":"photoswipe-lightbox-creator.js","sources":["../../node_modules/photoswipe/dist/photoswipe.esm.js","../../node_modules/photoswipe/dist/photoswipe-lightbox.esm.js","../../node_modules/photoswipe-video-plugin/src/default-options.js","../../node_modules/photoswipe-video-plugin/src/video-content-setup.js","../../node_modules/photoswipe-video-plugin/src/index.js","../../src/js/elements/photoswipe-lightbox-creator.ts"],"sourcesContent":["/*!\n  * PhotoSwipe 5.3.4 - https://photoswipe.com\n  * (c) 2022 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nfunction roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nfunction clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nfunction setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nfunction decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element propery was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\n\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\n\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nconst arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nconst arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nfunction getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = null;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n\r\n      if (this.slide.holderElement) {\r\n        this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {ElementProvider=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {ElementProvider=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n","/*!\n  * PhotoSwipe Lightbox 5.3.4 - https://photoswipe.com\n  * (c) 2022 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n */\r\nfunction isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = null;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n\r\n      if (this.slide.holderElement) {\r\n        this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp // ... if PhotoSwipe is already open\r\n        || window.navigator.onLine === false) { // ... if offline\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not ideal way to detect them.\r\n    //\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource=} dataSource\r\n   * @param {{ x?: number; y?: number }} [initialPoint]\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp) {\r\n      return false;\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource=} dataSource\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name].forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name].forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = null;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = null;\r\n      window.pswp = null;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    if (this.pswp) {\r\n      this.pswp.destroy();\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = null;\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\n\nexport { PhotoSwipeLightbox as default };\n//# sourceMappingURL=photoswipe-lightbox.esm.js.map\n","export const defaultOptions = {\r\n  videoAttributes: { controls: '', playsinline: '', preload: 'auto' },\r\n  autoplay: true,\r\n\r\n  // prevent drag/swipe gesture over the bottom part of video\r\n  // set to 0 to disable\r\n  preventDragOffset: 40\r\n};\r\n","/**\r\n * Check if slide has video content\r\n *\r\n * @param {Slide|Content} content Slide or Content object\r\n * @returns Boolean\r\n */\r\nfunction isVideoContent(content) {\r\n  return (content && content.data && content.data.type === 'video');\r\n}\r\n\r\nclass VideoContentSetup {\r\n  constructor(lightbox, options) {\r\n    this.options = options;\r\n\r\n    this.initLightboxEvents(lightbox);\r\n    lightbox.on('init', () => {\r\n      this.initPswpEvents(lightbox.pswp);\r\n    });\r\n  }\r\n\r\n  initLightboxEvents(lightbox) {\r\n    lightbox.on('contentLoad', this.onContentLoad.bind(this));\r\n    lightbox.on('contentDestroy', this.onContentDestroy.bind(this));\r\n    lightbox.on('contentActivate', this.onContentActivate.bind(this));\r\n    lightbox.on('contentDeactivate', this.onContentDeactivate.bind(this));\r\n    lightbox.on('contentAppend', this.onContentAppend.bind(this));\r\n    lightbox.on('contentResize', this.onContentResize.bind(this));\r\n\r\n    lightbox.addFilter('isKeepingPlaceholder', this.isKeepingPlaceholder.bind(this));\r\n    lightbox.addFilter('isContentZoomable', this.isContentZoomable.bind(this));\r\n    lightbox.addFilter('useContentPlaceholder', this.useContentPlaceholder.bind(this));\r\n\r\n    lightbox.addFilter('domItemData', (itemData, element, linkEl) => {\r\n      if (itemData.type === 'video' && linkEl) {\r\n        if (linkEl.dataset.pswpVideoSources) {\r\n          itemData.videoSources = JSON.parse(pswpVideoSources);\r\n        } else if (linkEl.dataset.pswpVideoSrc) {\r\n          itemData.videoSrc = linkEl.dataset.pswpVideoSrc;\r\n        } else {\r\n          itemData.videoSrc = linkEl.href;\r\n        }\r\n      }\r\n      return itemData;\r\n    });\r\n  }\r\n\r\n  initPswpEvents(pswp) {\r\n    // Prevent draggin when pointer is in bottom part of the video\r\n    // todo: add option for this\r\n    pswp.on('pointerDown', (e) => {\r\n      const slide = pswp.currSlide;\r\n      if (isVideoContent(slide) && this.options.preventDragOffset) {\r\n        const origEvent = e.originalEvent;\r\n        if (origEvent.type === 'pointerdown') {\r\n          const videoHeight = Math.ceil(slide.height * slide.currZoomLevel);\r\n          const verticalEnding = videoHeight + slide.bounds.center.y;\r\n          const pointerYPos = origEvent.pageY - pswp.offset.y;\r\n          if (pointerYPos > verticalEnding - this.options.preventDragOffset \r\n              && pointerYPos < verticalEnding) {\r\n            e.preventDefault();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // do not append video on nearby slides\r\n    pswp.on('appendHeavy', (e) => {\r\n      if (isVideoContent(e.slide) && !e.slide.isActive) {\r\n        e.preventDefault();\r\n      }\r\n    });\r\n\r\n    pswp.on('close', () => {\r\n      if (isVideoContent(pswp.currSlide.content)) {\r\n        // Switch from zoom to fade closing transition,\r\n        // as zoom transition is choppy for videos\r\n        if (!pswp.options.showHideAnimationType\r\n          || pswp.options.showHideAnimationType === 'zoom') {\r\n          pswp.options.showHideAnimationType = 'fade';\r\n        }\r\n\r\n        // pause video when closing\r\n        this.pauseVideo(pswp.currSlide.content);\r\n      }\r\n    });\r\n  }\r\n\r\n  onContentDestroy({ content }) {\r\n    if (isVideoContent(content)) {\r\n      if (content._videoPosterImg) {\r\n        content._videoPosterImg.onload =  content._videoPosterImg.onerror = null;\r\n        content._videoPosterImg = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  onContentResize(e) {\r\n    if (isVideoContent(e.content)) {\r\n      e.preventDefault();\r\n\r\n      const width = e.width;\r\n      const height = e.height;\r\n      const content = e.content;\r\n\r\n      if (content.element) {\r\n        content.element.style.width = width + 'px';\r\n        content.element.style.height = height + 'px';\r\n      }\r\n  \r\n      if (content.slide && content.slide.placeholder) {\r\n        // override placeholder size, so it more accurately matches the video\r\n        const placeholderElStyle = content.slide.placeholder.element.style;\r\n        placeholderElStyle.transform = 'none';\r\n        placeholderElStyle.width = width + 'px';\r\n        placeholderElStyle.height = height + 'px';\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  isKeepingPlaceholder(isZoomable, content) {\r\n    if (isVideoContent(content)) {\r\n      return false;\r\n    }\r\n    return isZoomable;\r\n  }\r\n\r\n  isContentZoomable(isZoomable, content) {\r\n    if (isVideoContent(content)) {\r\n      return false;\r\n    }\r\n    return isZoomable;\r\n  }\r\n\r\n  onContentActivate({ content }) {\r\n    if (isVideoContent(content) && this.options.autoplay) {\r\n      this.playVideo(content);\r\n    }\r\n  }\r\n\r\n  onContentDeactivate({ content }) {\r\n    if (isVideoContent(content)) {\r\n      this.pauseVideo(content);\r\n    }\r\n  }\r\n\r\n  onContentAppend(e) {\r\n    if (isVideoContent(e.content)) {\r\n      e.preventDefault();\r\n      e.content.isAttached = true;\r\n      e.content.appendImage();\r\n    }\r\n  }\r\n\r\n  onContentLoad(e) {\r\n    const content = e.content; // todo: videocontent\r\n\r\n    if (!isVideoContent(e.content)) {\r\n      return;\r\n    }\r\n\r\n    // stop default content load\r\n    e.preventDefault();\r\n\r\n    if (content.element) {\r\n      return;\r\n    }\r\n\r\n    content.state = 'loading';\r\n    content.type = 'video'; // TODO: move this to pswp core?\r\n\r\n    content.element = document.createElement('video');\r\n\r\n    if (this.options.videoAttributes) {\r\n      for(let key in this.options.videoAttributes) {\r\n        content.element.setAttribute(key, this.options.videoAttributes[key] || '');\r\n      }\r\n    }\r\n\r\n    content.element.setAttribute('poster', content.data.msrc);\r\n\r\n    this.preloadVideoPoster(content, content.data.msrc);\r\n\r\n    content.element.style.position = 'absolute';\r\n    content.element.style.left = 0;\r\n    content.element.style.top = 0;\r\n    \r\n    if (content.data.videoSources) {\r\n      content.data.videoSources.forEach((source) => {\r\n        let sourceEl = document.createElement('source');\r\n        sourceEl.src = source.src;\r\n        sourceEl.type = source.type;\r\n        content.element.appendChild(sourceEl);\r\n      });\r\n    } else if (content.data.videoSrc) {\r\n      // Force video preload\r\n      // https://muffinman.io/blog/hack-for-ios-safari-to-display-html-video-thumbnail/\r\n      // this.element.src = this.data.videoSrc + '#t=0.001';\r\n      content.element.src = content.data.videoSrc;\r\n    }\r\n  }\r\n\r\n  preloadVideoPoster(content, src) {\r\n    if (!content._videoPosterImg && src) {\r\n      content._videoPosterImg = new Image();\r\n      content._videoPosterImg.src = src;\r\n      if (content._videoPosterImg.complete) {\r\n        content.onLoaded();\r\n      } else {\r\n        content._videoPosterImg.onload =  content._videoPosterImg.onerror = () => {\r\n          content.onLoaded();\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  playVideo(content) {\r\n    if (content.element) {\r\n      content.element.play();\r\n    }\r\n  }\r\n\r\n  pauseVideo(content) {\r\n    if (content.element) {\r\n      content.element.pause();\r\n    }\r\n  }\r\n\r\n  useContentPlaceholder(usePlaceholder, content) {\r\n    if (isVideoContent(content)) {\r\n      return true;\r\n    }\r\n    return usePlaceholder;\r\n  }\r\n\r\n}\r\n\r\nexport default VideoContentSetup;\r\n","import { defaultOptions } from './default-options.js';\r\nimport VideoContentSetup from './video-content-setup.js';\r\n\r\nclass PhotoSwipeVideoPlugin {\r\n  constructor(lightbox, options) {\r\n    new VideoContentSetup(lightbox, {\r\n      ...defaultOptions,\r\n      ...options\r\n    });\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeVideoPlugin;\r\n","import PhotoSwipe from 'photoswipe';\n// @ts-expect-error\nimport PhotoSwipeLightbox from 'photoswipe/lightbox';\n// @ts-expect-error\nimport PhotoSwipeVideoPlugin from 'photoswipe-video-plugin';\n\n// Create a global object to hold the element's variables and config\nconst pswpLightboxCreator = {\n    items: [] as HTMLElement[],\n    parents: new Set<HTMLElement>(),\n    lightboxes: new Set<PhotoSwipeLightbox>(),\n    parentIdAttribute: 'lightbox-parent-id',\n    itemIdAttribute: 'lightbox-item-id',\n}\n\n/**\n * Initialize the element by getting add lightbox items from the page\n */\nfunction initPhotoswipeLightboxCreator() {\n    pswpLightboxCreator.items = Array.from(document.querySelectorAll(`[${pswpLightboxCreator.itemIdAttribute}]`));\n\n    pswpLightboxCreator.items.forEach((item) => {\n        const itemLightboxParent = item.closest(`[${pswpLightboxCreator.parentIdAttribute}]`) as HTMLElement;\n        pswpLightboxCreator.parents.add(itemLightboxParent);\n    });\n\n    _initParents();\n}\n\n/**\n * Initialize a lightbox element for each of the lightbox parent element\n */\nfunction _initParents() {\n    pswpLightboxCreator.parents.forEach((parent) => {\n        _initLightbox(parent);\n    })\n}\n\n/**\n * Initialize  single instance of a PhotoSwipe lightbox\n * @param {HTMLElement} parent\n */\nfunction _initLightbox(parent: HTMLElement) {\n    const allItems = Array.from(parent.querySelectorAll(`[${pswpLightboxCreator.itemIdAttribute}]`));\n\n    // Remove any \"cloned\" slider slides (created by the slider plugin to enable the looping option\n    const filteredItems = allItems.filter(item => !item.closest('.splide__slide--clone'));\n\n    const lightbox: PhotoSwipeLightbox = new PhotoSwipeLightbox({\n        gallery: parent,\n        children: filteredItems,\n        pswpModule: PhotoSwipe,\n        allowPanToNext: true,\n        preloaderDelay: 0,\n    })\n\n    lightbox.on('uiRegister', () => _handleUiRegister(lightbox));\n\n    lightbox.videoPlugin = new PhotoSwipeVideoPlugin(lightbox, {\n        autoplay: false\n    });\n\n    lightbox.init();\n\n    pswpLightboxCreator.lightboxes.add(lightbox);\n\n    parent.dispatchEvent(new CustomEvent('toujou-lightbox-init', {\n        bubbles: true,\n        composed: true,\n        detail: {\n            el: parent,\n            lightbox: lightbox\n        }\n    }))\n}\n\n/**\n * Set up the lightbox to show the required elements\n * @param {PhotoSwipeLightbox} lightbox\n */\nfunction _handleUiRegister(lightbox: PhotoSwipeLightbox): void {\n    lightbox.pswp.ui.registerElement({\n        name: 'caption',\n        order: 9,\n        isButton: false,\n        appendTo: 'root',\n        onInit: (el: HTMLElement) => {\n            lightbox.pswp.element.setAttribute('aria-label', 'Lightbox');\n            lightbox.pswp.on('change', () => _handleChange(el, lightbox));\n        },\n    });\n}\n\n/**\n * Replace the lightbox caption with the image's title text\n * @param {HTMLElement} el\n * @param {PhotoSwipeLightbox} lightbox\n */\nfunction _handleChange(el: HTMLElement, lightbox: PhotoSwipeLightbox): void {\n    let captionText = '';\n    const currSlideElement = lightbox.pswp.currSlide.data.element;\n\n    if (currSlideElement) {\n        captionText = currSlideElement.getAttribute('title');\n    }\n\n    el.textContent = captionText ? captionText : '';\n}\n\n/**\n * Wait for the page to completely load before initializing the photoswipe-lightbox-creator script\n */\nif (document.readyState !== \"loading\") {\n    setTimeout(() => {\n        initPhotoswipeLightboxCreator();\n    });\n} else {\n    document.addEventListener(\"DOMContentLoaded\", () => {\n        initPhotoswipeLightboxCreator();\n    });\n}\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","e","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","PanBounds","slide","currZoomLevel","center","reset","update","_updateAxis","dispatch","axis","elSize","data","panAreaSize","correctPan","panOffset","ZoomLevel$1","maxWidth","maxHeight","elementSize","hRatio","vRatio","fit","fill","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Number","Slide","isActive","currIndex","currentResolution","isFirstSlide","opener","isOpen","ZoomLevel","pan","content","contentLoader","getContentBySlide","container","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","holderElement","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","heavyAppended","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","end","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","actionFullName","clickToCloseNonZoomable","classList","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","drag","tapHandler","on","events","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","preventDefault","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","_tapTimer","setTimeout","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","itemHolders","resetPosition","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","_containerShiftIndex","_currPositionIndex","_prevPositionIndex","appendHolders","i","setAttribute","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","Keyboard","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","returnFocus","_wasFocused","focus","which","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","CSSAnimation","props","onFinish","_target","_onComplete","_onTransitionEnd","_helperTimeout","_finalizeAnimation","_finished","removeEventListener","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","easer","prevTime","animationLoop","_raf","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","innerHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","_lastUpdatedZoomLevel","init","isRegistered","uiElementsData","sort","a","b","items","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent$1","details","assign","Eventable$1","_listeners","_filters","addFilter","fn","priority","f1","f2","removeFilter","args","apply","off","PhotoSwipeEvent","Placeholder$1","imageSrc","decoding","alt","src","parentNode","Content$1","instance","displayedImageWidth","displayedImageHeight","isAttached","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","Placeholder","isImageContent","loadImage","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","errorMsgEl","errorMsg","supportsDecode","isDecoding","decode","catch","finally","appendImage","lazyLoadData","createContentFromData","zoomLevel","ceil","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","getContentByIndex","getItemData","lazyLoadSlide","addToCache","removeByIndex","indexToRemove","item","find","Eventable","numItems","dataSource","_getGalleryDOMElements","gallery","Content","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","MIN_OPACITY","Opener","isClosed","_prepareOpen","_thumbBounds","open","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_placeholder","_useAnimation","_animateZoom","Boolean","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","innerRect","_cropContainer1","_cropContainer2","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","decoded","isDelaying","img","reject","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","PhotoSwipeBase","super","_prepareOptions","_prevViewportSize","keyboard","isDestroying","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_initialItemData","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","listeners","refreshSlideContent","slideIndex","potentialHolderIndex","holder","hasMouse","matchMedia","matches","test","userAgent","setScrollOffset","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement","PhotoSwipeLightbox","_uid","onThumbnailsClick","gallerySelector","onLine","initialPoint","clickedIndex","getClickedIndex","loadAndOpen","getClickedIndexFn","clickedTarget","clickedChildIndex","currentTarget","child","shouldOpen","promiseArray","pswpModuleType","pswpModule","prototype","Error","openPromise","preloadFirstSlide","_preloadedContent","uid","all","then","iterableModules","mainModule","_openPhotoswipe","module","default","keys","videoAttributes","controls","playsinline","autoplay","preventDragOffset","isVideoContent","VideoContentSetup","lightbox","initLightboxEvents","initPswpEvents","onContentLoad","onContentDestroy","onContentActivate","onContentDeactivate","onContentAppend","onContentResize","isKeepingPlaceholder","isContentZoomable","useContentPlaceholder","pswpVideoSources","videoSources","JSON","parse","pswpVideoSrc","videoSrc","origEvent","verticalEnding","pointerYPos","pauseVideo","_videoPosterImg","placeholderElStyle","playVideo","key","preloadVideoPoster","position","source","sourceEl","Image","play","pause","PhotoSwipeVideoPlugin","pswpLightboxCreator","parents","Set","lightboxes","parentIdAttribute","itemIdAttribute","initPhotoswipeLightboxCreator","itemLightboxParent","allItems","filteredItems","captionText","currSlideElement","textContent","_handleChange","_handleUiRegister","videoPlugin","dispatchEvent","CustomEvent","bubbles","composed","detail","_initLightbox","readyState"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}