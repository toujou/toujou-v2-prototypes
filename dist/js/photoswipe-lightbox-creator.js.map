{"version":3,"file":"photoswipe-lightbox-creator.js","sources":["../../node_modules/photoswipe/dist/photoswipe.esm.js","../../node_modules/photoswipe/dist/photoswipe-lightbox.esm.js","../../node_modules/photoswipe-video-plugin/src/default-options.js","../../node_modules/photoswipe-video-plugin/src/video-content-setup.js","../../node_modules/photoswipe-video-plugin/src/index.js","../../src/js/elements/photoswipe-lightbox-creator.ts"],"sourcesContent":["/*!\n  * PhotoSwipe 5.3.4 - https://photoswipe.com\n  * (c) 2022 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nfunction roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nfunction clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nfunction setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nfunction decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element propery was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\n\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\n\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nconst arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nconst arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nfunction getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = null;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n\r\n      if (this.slide.holderElement) {\r\n        this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {ElementProvider=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {ElementProvider=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n","/*!\n  * PhotoSwipe Lightbox 5.3.4 - https://photoswipe.com\n  * (c) 2022 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n */\r\nfunction isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = null;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n\r\n      if (this.slide.holderElement) {\r\n        this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp // ... if PhotoSwipe is already open\r\n        || window.navigator.onLine === false) { // ... if offline\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not ideal way to detect them.\r\n    //\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource=} dataSource\r\n   * @param {{ x?: number; y?: number }} [initialPoint]\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp) {\r\n      return false;\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource=} dataSource\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name].forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name].forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = null;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = null;\r\n      window.pswp = null;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    if (this.pswp) {\r\n      this.pswp.destroy();\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = null;\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\n\nexport { PhotoSwipeLightbox as default };\n//# sourceMappingURL=photoswipe-lightbox.esm.js.map\n","export const defaultOptions = {\r\n  videoAttributes: { controls: '', playsinline: '', preload: 'auto' },\r\n  autoplay: true,\r\n\r\n  // prevent drag/swipe gesture over the bottom part of video\r\n  // set to 0 to disable\r\n  preventDragOffset: 40\r\n};\r\n","/**\r\n * Check if slide has video content\r\n *\r\n * @param {Slide|Content} content Slide or Content object\r\n * @returns Boolean\r\n */\r\nfunction isVideoContent(content) {\r\n  return (content && content.data && content.data.type === 'video');\r\n}\r\n\r\nclass VideoContentSetup {\r\n  constructor(lightbox, options) {\r\n    this.options = options;\r\n\r\n    this.initLightboxEvents(lightbox);\r\n    lightbox.on('init', () => {\r\n      this.initPswpEvents(lightbox.pswp);\r\n    });\r\n  }\r\n\r\n  initLightboxEvents(lightbox) {\r\n    lightbox.on('contentLoad', this.onContentLoad.bind(this));\r\n    lightbox.on('contentDestroy', this.onContentDestroy.bind(this));\r\n    lightbox.on('contentActivate', this.onContentActivate.bind(this));\r\n    lightbox.on('contentDeactivate', this.onContentDeactivate.bind(this));\r\n    lightbox.on('contentAppend', this.onContentAppend.bind(this));\r\n    lightbox.on('contentResize', this.onContentResize.bind(this));\r\n\r\n    lightbox.addFilter('isKeepingPlaceholder', this.isKeepingPlaceholder.bind(this));\r\n    lightbox.addFilter('isContentZoomable', this.isContentZoomable.bind(this));\r\n    lightbox.addFilter('useContentPlaceholder', this.useContentPlaceholder.bind(this));\r\n\r\n    lightbox.addFilter('domItemData', (itemData, element, linkEl) => {\r\n      if (itemData.type === 'video' && linkEl) {\r\n        if (linkEl.dataset.pswpVideoSources) {\r\n          itemData.videoSources = JSON.parse(pswpVideoSources);\r\n        } else if (linkEl.dataset.pswpVideoSrc) {\r\n          itemData.videoSrc = linkEl.dataset.pswpVideoSrc;\r\n        } else {\r\n          itemData.videoSrc = linkEl.href;\r\n        }\r\n      }\r\n      return itemData;\r\n    });\r\n  }\r\n\r\n  initPswpEvents(pswp) {\r\n    // Prevent draggin when pointer is in bottom part of the video\r\n    // todo: add option for this\r\n    pswp.on('pointerDown', (e) => {\r\n      const slide = pswp.currSlide;\r\n      if (isVideoContent(slide) && this.options.preventDragOffset) {\r\n        const origEvent = e.originalEvent;\r\n        if (origEvent.type === 'pointerdown') {\r\n          const videoHeight = Math.ceil(slide.height * slide.currZoomLevel);\r\n          const verticalEnding = videoHeight + slide.bounds.center.y;\r\n          const pointerYPos = origEvent.pageY - pswp.offset.y;\r\n          if (pointerYPos > verticalEnding - this.options.preventDragOffset \r\n              && pointerYPos < verticalEnding) {\r\n            e.preventDefault();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // do not append video on nearby slides\r\n    pswp.on('appendHeavy', (e) => {\r\n      if (isVideoContent(e.slide) && !e.slide.isActive) {\r\n        e.preventDefault();\r\n      }\r\n    });\r\n\r\n    pswp.on('close', () => {\r\n      if (isVideoContent(pswp.currSlide.content)) {\r\n        // Switch from zoom to fade closing transition,\r\n        // as zoom transition is choppy for videos\r\n        if (!pswp.options.showHideAnimationType\r\n          || pswp.options.showHideAnimationType === 'zoom') {\r\n          pswp.options.showHideAnimationType = 'fade';\r\n        }\r\n\r\n        // pause video when closing\r\n        this.pauseVideo(pswp.currSlide.content);\r\n      }\r\n    });\r\n  }\r\n\r\n  onContentDestroy({ content }) {\r\n    if (isVideoContent(content)) {\r\n      if (content._videoPosterImg) {\r\n        content._videoPosterImg.onload =  content._videoPosterImg.onerror = null;\r\n        content._videoPosterImg = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  onContentResize(e) {\r\n    if (isVideoContent(e.content)) {\r\n      e.preventDefault();\r\n\r\n      const width = e.width;\r\n      const height = e.height;\r\n      const content = e.content;\r\n\r\n      if (content.element) {\r\n        content.element.style.width = width + 'px';\r\n        content.element.style.height = height + 'px';\r\n      }\r\n  \r\n      if (content.slide && content.slide.placeholder) {\r\n        // override placeholder size, so it more accurately matches the video\r\n        const placeholderElStyle = content.slide.placeholder.element.style;\r\n        placeholderElStyle.transform = 'none';\r\n        placeholderElStyle.width = width + 'px';\r\n        placeholderElStyle.height = height + 'px';\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  isKeepingPlaceholder(isZoomable, content) {\r\n    if (isVideoContent(content)) {\r\n      return false;\r\n    }\r\n    return isZoomable;\r\n  }\r\n\r\n  isContentZoomable(isZoomable, content) {\r\n    if (isVideoContent(content)) {\r\n      return false;\r\n    }\r\n    return isZoomable;\r\n  }\r\n\r\n  onContentActivate({ content }) {\r\n    if (isVideoContent(content) && this.options.autoplay) {\r\n      this.playVideo(content);\r\n    }\r\n  }\r\n\r\n  onContentDeactivate({ content }) {\r\n    if (isVideoContent(content)) {\r\n      this.pauseVideo(content);\r\n    }\r\n  }\r\n\r\n  onContentAppend(e) {\r\n    if (isVideoContent(e.content)) {\r\n      e.preventDefault();\r\n      e.content.isAttached = true;\r\n      e.content.appendImage();\r\n    }\r\n  }\r\n\r\n  onContentLoad(e) {\r\n    const content = e.content; // todo: videocontent\r\n\r\n    if (!isVideoContent(e.content)) {\r\n      return;\r\n    }\r\n\r\n    // stop default content load\r\n    e.preventDefault();\r\n\r\n    if (content.element) {\r\n      return;\r\n    }\r\n\r\n    content.state = 'loading';\r\n    content.type = 'video'; // TODO: move this to pswp core?\r\n\r\n    content.element = document.createElement('video');\r\n\r\n    if (this.options.videoAttributes) {\r\n      for(let key in this.options.videoAttributes) {\r\n        content.element.setAttribute(key, this.options.videoAttributes[key] || '');\r\n      }\r\n    }\r\n\r\n    content.element.setAttribute('poster', content.data.msrc);\r\n\r\n    this.preloadVideoPoster(content, content.data.msrc);\r\n\r\n    content.element.style.position = 'absolute';\r\n    content.element.style.left = 0;\r\n    content.element.style.top = 0;\r\n    \r\n    if (content.data.videoSources) {\r\n      content.data.videoSources.forEach((source) => {\r\n        let sourceEl = document.createElement('source');\r\n        sourceEl.src = source.src;\r\n        sourceEl.type = source.type;\r\n        content.element.appendChild(sourceEl);\r\n      });\r\n    } else if (content.data.videoSrc) {\r\n      // Force video preload\r\n      // https://muffinman.io/blog/hack-for-ios-safari-to-display-html-video-thumbnail/\r\n      // this.element.src = this.data.videoSrc + '#t=0.001';\r\n      content.element.src = content.data.videoSrc;\r\n    }\r\n  }\r\n\r\n  preloadVideoPoster(content, src) {\r\n    if (!content._videoPosterImg && src) {\r\n      content._videoPosterImg = new Image();\r\n      content._videoPosterImg.src = src;\r\n      if (content._videoPosterImg.complete) {\r\n        content.onLoaded();\r\n      } else {\r\n        content._videoPosterImg.onload =  content._videoPosterImg.onerror = () => {\r\n          content.onLoaded();\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  playVideo(content) {\r\n    if (content.element) {\r\n      content.element.play();\r\n    }\r\n  }\r\n\r\n  pauseVideo(content) {\r\n    if (content.element) {\r\n      content.element.pause();\r\n    }\r\n  }\r\n\r\n  useContentPlaceholder(usePlaceholder, content) {\r\n    if (isVideoContent(content)) {\r\n      return true;\r\n    }\r\n    return usePlaceholder;\r\n  }\r\n\r\n}\r\n\r\nexport default VideoContentSetup;\r\n","import { defaultOptions } from './default-options.js';\r\nimport VideoContentSetup from './video-content-setup.js';\r\n\r\nclass PhotoSwipeVideoPlugin {\r\n  constructor(lightbox, options) {\r\n    new VideoContentSetup(lightbox, {\r\n      ...defaultOptions,\r\n      ...options\r\n    });\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeVideoPlugin;\r\n","import PhotoSwipe from 'photoswipe';\n// @ts-expect-error\nimport PhotoSwipeLightbox from 'photoswipe/lightbox';\n// @ts-expect-error\nimport PhotoSwipeVideoPlugin from 'photoswipe-video-plugin';\n\n// Create a global object to hold the element's variables and config\nconst pswpLightboxCreator = {\n    items: [] as HTMLElement[],\n    parents: new Set<HTMLElement>(),\n    lightboxes: new Set<PhotoSwipeLightbox>(),\n    parentIdAttribute: 'lightbox-parent-id',\n    itemIdAttribute: 'lightbox-item-id',\n}\n\n/**\n * Initialize the element by getting add lightbox items from the page\n */\nfunction initPhotoswipeLightboxCreator() {\n    pswpLightboxCreator.items = Array.from(document.querySelectorAll(`[${pswpLightboxCreator.itemIdAttribute}]`));\n\n    pswpLightboxCreator.items.forEach((item) => {\n        const itemLightboxParent = item.closest(`[${pswpLightboxCreator.parentIdAttribute}]`) as HTMLElement;\n        pswpLightboxCreator.parents.add(itemLightboxParent);\n    });\n\n    _initParents();\n}\n\n/**\n * Initialize a lightbox element for each of the lightbox parent element\n */\nfunction _initParents() {\n    pswpLightboxCreator.parents.forEach((parent) => {\n        _initLightbox(parent);\n    })\n}\n\n/**\n * Initialize  single instance of a PhotoSwipe lightbox\n * @param {HTMLElement} parent\n */\nfunction _initLightbox(parent: HTMLElement) {\n    const lightbox: PhotoSwipeLightbox = new PhotoSwipeLightbox({\n        gallery: parent,\n        children: `[${pswpLightboxCreator.itemIdAttribute}]`,\n        pswpModule: PhotoSwipe,\n        allowPanToNext: true,\n        preloaderDelay: 0,\n    })\n\n    lightbox.on('uiRegister', () => _handleUiRegister(lightbox));\n\n    lightbox.videoPlugin = new PhotoSwipeVideoPlugin(lightbox, {\n        autoplay: false\n    });\n\n    lightbox.init();\n\n    pswpLightboxCreator.lightboxes.add(lightbox);\n\n    parent.dispatchEvent(new CustomEvent('toujou-lightbox-init', {\n        bubbles: true,\n        composed: true,\n        detail: {\n            el: parent,\n            lightbox: lightbox\n        }\n    }))\n}\n\n/**\n * Set up the lightbox to show the required elements\n * @param {PhotoSwipeLightbox} lightbox\n */\nfunction _handleUiRegister(lightbox: PhotoSwipeLightbox): void {\n    lightbox.pswp.ui.registerElement({\n        name: 'caption',\n        order: 9,\n        isButton: false,\n        appendTo: 'root',\n        onInit: (el: HTMLElement) => {\n            lightbox.pswp.element.setAttribute('aria-label', 'Lightbox');\n            lightbox.pswp.on('change', () => _handleChange(el, lightbox));\n        },\n    });\n}\n\n/**\n * Replace the lightbox caption with the image's title text\n * @param {HTMLElement} el\n * @param {PhotoSwipeLightbox} lightbox\n */\nfunction _handleChange(el: HTMLElement, lightbox: PhotoSwipeLightbox): void {\n    let captionText = '';\n    const currSlideElement = lightbox.pswp.currSlide.data.element;\n\n    if (currSlideElement) {\n        captionText = currSlideElement.getAttribute('title');\n    }\n\n    el.textContent = captionText ? captionText : '';\n}\n\n/**\n * Wait for the page to completely load before initializing the photoswipe-lightbox-creator script\n */\nif (document.readyState !== \"loading\") {\n    setTimeout(() => {\n        initPhotoswipeLightboxCreator();\n    });\n} else {\n    document.addEventListener(\"DOMContentLoaded\", () => {\n        initPhotoswipeLightboxCreator();\n    });\n}\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","e","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","PanBounds","slide","currZoomLevel","center","reset","update","_updateAxis","dispatch","axis","elSize","data","panAreaSize","correctPan","panOffset","ZoomLevel$1","maxWidth","maxHeight","elementSize","hRatio","vRatio","fit","fill","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Number","MAX_IMAGE_WIDTH","Slide","isActive","currIndex","currentResolution","isFirstSlide","opener","isOpen","ZoomLevel","pan","content","contentLoader","getContentBySlide","container","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","holderElement","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","heavyAppended","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","end","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","actionFullName","clickToCloseNonZoomable","classList","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","drag","tapHandler","on","events","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","preventDefault","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","_tapTimer","setTimeout","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","itemHolders","resetPosition","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","_containerShiftIndex","_currPositionIndex","_prevPositionIndex","appendHolders","i","setAttribute","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","Keyboard","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","returnFocus","_wasFocused","focus","specialKeyUsed","which","ctrlKey","metaKey","altKey","shiftKey","keydownAction","isForward","keyCode","escKey","arrowKeys","template","CSSAnimation","props","onFinish","_target","_onComplete","_onTransitionEnd","_helperTimeout","_finalizeAnimation","_finished","removeEventListener","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","easer","prevTime","animationLoop","_raf","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","innerHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","_lastUpdatedZoomLevel","init","isRegistered","uiElementsData","sort","a","b","items","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent$1","details","assign","Eventable$1","_listeners","_filters","addFilter","fn","priority","f1","f2","removeFilter","args","apply","off","PhotoSwipeEvent","Placeholder$1","imageSrc","decoding","alt","src","setWidthHeight$1","parentNode","Content$1","instance","displayedImageWidth","displayedImageHeight","isAttached","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","Placeholder","isImageContent","loadImage","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","errorMsgEl","errorMsg","supportsDecode","isDecoding","decode","catch","finally","appendImage","lazyLoadData","createContentFromData","zoomLevel","ceil","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","getContentByIndex","lazyLoadSlide","getItemData","addToCache","removeByIndex","indexToRemove","item","find","Eventable","numItems","dataSource","_getGalleryDOMElements","gallery","Content","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","MIN_OPACITY","Opener","isClosed","_prepareOpen","_thumbBounds","open","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_placeholder","_useAnimation","_animateZoom","Boolean","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","innerRect","_cropContainer1","_cropContainer2","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","decoded","isDelaying","img","reject","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","PhotoSwipeBase","_prepareOptions","_prevViewportSize","keyboard","isDestroying","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_initialItemData","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","listeners","refreshSlideContent","slideIndex","potentialHolderIndex","holder","hasMouse","matchMedia","matches","test","userAgent","setScrollOffset","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement","PhotoSwipeLightbox","_uid","onThumbnailsClick","gallerySelector","onLine","initialPoint","clickedIndex","getClickedIndex","loadAndOpen","getClickedIndexFn","clickedTarget","clickedChildIndex","currentTarget","child","shouldOpen","promiseArray","pswpModuleType","pswpModule","prototype","Error","openPromise","preloadFirstSlide","_preloadedContent","uid","all","then","iterableModules","mainModule","_openPhotoswipe","module","default","keys","videoAttributes","controls","playsinline","autoplay","preventDragOffset","isVideoContent","VideoContentSetup","lightbox","initLightboxEvents","initPswpEvents","onContentLoad","onContentDestroy","onContentActivate","onContentDeactivate","onContentAppend","onContentResize","isKeepingPlaceholder","isContentZoomable","useContentPlaceholder","pswpVideoSources","videoSources","JSON","parse","pswpVideoSrc","videoSrc","origEvent","verticalEnding","pointerYPos","pauseVideo","_videoPosterImg","placeholderElStyle","playVideo","key","preloadVideoPoster","position","source","sourceEl","Image","play","pause","PhotoSwipeVideoPlugin","pswpLightboxCreator","parents","Set","lightboxes","parentIdAttribute","itemIdAttribute","initPhotoswipeLightboxCreator","itemLightboxParent","captionText","currSlideElement","textContent","_handleChange","_handleUiRegister","videoPlugin","dispatchEvent","CustomEvent","bubbles","composed","detail","_initLightbox","readyState"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}