{"version":3,"file":"toujou-details-accordion.js","sources":["../../src/components/toujou-details-accordion/toujou-details-accordion.ts"],"sourcesContent":["import { LitElement } from 'lit'\nimport { customElement, property } from 'lit/decorators.js'\nimport { ToujouDetails } from \"../toujou-details/toujou-details\";\n\n@customElement('toujou-details-accordion')\nexport class ToujouDetailsAccordion extends LitElement {\n\n    /**\n     * Backend option, allow only on child <toujou-details> element to be open at a time\n     */\n    @property({\n        type: Boolean,\n        attribute: \"single-expand-mode\"\n    })\n    singleExpandMode: boolean = false;\n\n    /**\n     * List of all the child <toujou-details> elements\n     */\n    @property({\n        type: Array\n    })\n    toujouDetailsElements: ToujouDetails[] = [];\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        this.addEventListener('toujou-details-connected', this._handleDetailsConnected);\n        this.addEventListener('toujou-details-toggle', this._handleDetailsToggle);\n\n        this.dispatchEvent(new CustomEvent('toujou-details-accordion-connected', {\n            bubbles: true,\n            composed: true,\n            detail: {\n                accordionEl: this\n            }\n        }));\n    }\n\n    disconnectedCallback() {\n        this.removeEventListener('toujou-details-connected', this._handleDetailsConnected);\n        this.removeEventListener('toujou-details-toggle', this._handleDetailsToggle);\n    }\n\n    _handleDetailsConnected(event: Event): void {\n        this.toujouDetailsElements.push((<any>event).detail.detailsEl);\n    }\n\n    /**\n     * If we are on single-expand-mode, we must close all other <toujou-details> when a new one opens\n     * For printing we must allow all accordion items to be open\n     * @param event\n     */\n    _handleDetailsToggle(event: Event) {\n        if (!this.singleExpandMode || window.matchMedia('print').matches || !((<any>event).detail.state)) return;\n\n        const currentDetailsId = (<any>event).detail.detailsEl.id;\n        this.toujouDetailsElements.forEach((detailsEl) => {\n            if (detailsEl.id === currentDetailsId) return;\n            detailsEl.isOpen = false;\n        })\n    }\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'toujou-details-accordion': ToujouDetailsAccordion\n    }\n}\n\n"],"names":["ToujouDetailsAccordion","LitElement","constructor","this","singleExpandMode","toujouDetailsElements","connectedCallback","addEventListener","_handleDetailsConnected","_handleDetailsToggle","dispatchEvent","CustomEvent","bubbles","composed","detail","accordionEl","disconnectedCallback","removeEventListener","event","push","detailsEl","window","matchMedia","matches","state","currentDetailsId","id","forEach","isOpen","__decorateClass","property","type","Boolean","attribute","prototype","Array","customElement"],"mappings":"wXAKa,IAAAA,EAAN,cAAqCC,EAmBxC,WAAAC,WAV4BC,KAAAC,kBAAA,EAQ5BD,KAAAE,sBAAyC,EAIzC,CAEA,iBAAAC,GACSH,KAAAI,iBAAiB,2BAA4BJ,KAAKK,yBAClDL,KAAAI,iBAAiB,wBAAyBJ,KAAKM,sBAE/CN,KAAAO,cAAc,IAAIC,YAAY,qCAAsC,CACrEC,SAAS,EACTC,UAAU,EACVC,OAAQ,CACJC,YAAaZ,QAGzB,CAEA,oBAAAa,GACSb,KAAAc,oBAAoB,2BAA4Bd,KAAKK,yBACrDL,KAAAc,oBAAoB,wBAAyBd,KAAKM,qBAC3D,CAEA,uBAAAD,CAAwBU,GACpBf,KAAKE,sBAAsBc,KAAWD,EAAOJ,OAAOM,UACxD,CAOA,oBAAAX,CAAqBS,GACb,IAACf,KAAKC,kBAAoBiB,OAAOC,WAAW,SAASC,UAAmBL,EAAOJ,OAAOU,MAAQ,OAE5F,MAAAC,EAAyBP,EAAOJ,OAAOM,UAAUM,GAClDvB,KAAAE,sBAAsBsB,SAASP,IAC5BA,EAAUM,KAAOD,IACrBL,EAAUQ,QAAS,EAAA,GAE3B,GAjDAC,EAAA,CAJCC,EAAS,CACNC,KAAMC,QACNC,UAAW,wBAPNjC,EASTkC,UAAA,mBAAA,GAQAL,EAAA,CAHCC,EAAS,CACNC,KAAMI,SAfDnC,EAiBTkC,UAAA,wBAAA,GAjBSlC,EAAN6B,EAAA,CADNO,EAAc,6BACFpC"}