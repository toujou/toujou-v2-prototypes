{"version":3,"file":"toujou-consent-widget.js","sources":["../../src/components/copied/toujou-consent-widget/toujou-consent-widget.styles.js","../../src/components/copied/toujou-consent-widget/toujou-consent-widget.js"],"sourcesContent":["import { css } from 'lit';\n\nexport const ToujouConsentWidgetStyles = css`\n  :host {\n    display: var(--toujou-consent-widget-display, block);\n  }\n`;","import { LitElement, html } from 'lit';\nimport { consentsStore } from './consentsStore';\nimport {\n  clearConsentTypeData,\n  saveAllConsents,\n  dismissConsentBox,\n  undismissConsentBox,\n} from './actions/consent-actions';\nimport { ToujouConsentWidgetStyles } from \"./toujou-consent-widget.styles.js\";\n\nclass ToujouConsentWidget extends LitElement {\n  static get is() {\n    return 'toujou-consent-widget';\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  render() {\n    return html`\n      <slot name=\"consentWidgetHeader\"></slot>\n      <slot id=\"consentElements\"></slot>\n      <slot name=\"consentWarning\" id=\"consentWarning\"></slot>\n    `;\n  }\n\n  static styles = [ ToujouConsentWidgetStyles ];\n\n  static get styles() {\n    return styles;\n  }\n\n  set _warningVisible(value) {\n    this.setAttribute('warningvisible', value);\n  }\n\n  static get properties() {\n    return {\n      inPage: {\n        type: Boolean,\n        attribute: 'in-page',\n      },\n      listenTo: {\n        type: String,\n      },\n      listenOn: {\n        type: String,\n      },\n      _warningVisible: {\n        type: Boolean,\n      },\n      deactivated: {\n        type: Boolean,\n      },\n    };\n  }\n\n  /**\n   * Add separate event listeners to each listener type on the 'listenTo' attribute\n   */\n  set listenTo(events) {\n    events.split(/\\s+/).forEach((eventName) => {\n      this.addEventListener(eventName, this._handleEvent);\n    });\n  }\n\n  /**\n   * When the '_dismissedBox' is set we need to do two things:\n   *    - Set / Remove the 'hidden' attribute from the 'consent-box' element\n   *    - Set the correct value for the '_warningVisible' property\n   */\n  set _dismissedBox(value) {\n    if (!this.inPage) {\n      // eslint-disable-next-line no-unused-expressions\n      value ? this.setAttribute('hidden', '') : this.removeAttribute('hidden');\n    }\n\n    this._warningVisible = this.inPage && !value;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onStateChange = this.onStateChange.bind(this);\n    this._handleEvent = this._handleEvent.bind(this);\n\n    this.inPage = false;\n    this.deactivated = false;\n    this.store = consentsStore;\n    this.store.subscribe(this.onStateChange);\n    this.consentTypeNames = ['tracking', 'html', 'maps', 'video'];\n\n    this._state = this.store.getState();\n    this.listenOn = '*';\n    this._warningVisible = this.inPage;\n\n    if (window.location.hash === '#aaa') {\n      this.deactivated = true;\n    }\n\n    this.addEventListener('toujou-consent-connected', this._handleConsentConnected);\n    this.addEventListener('toujou-consent-checkbox-changed', this._handleConsentCheckboxChanged);\n  }\n\n  /**\n   * This function fires when the component is appended to the document.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n\n    this._inPage = this.inPage;\n    this._dismissedBox = this._state.consents.consentBoxDismissed ? this._state.consents.consentBoxDismissed : false;\n\n    if (this.deactivated) {\n      setTimeout(() => {\n        this._prepareToSaveConsents();\n        this._dismissConsentBox();\n        this._dispatchConsentDeactivated();\n      });\n    }\n  }\n\n  /**\n   * When the element first updates we check to see if\n   *    - the widget has been dismissed AND\n   *    - one consent is missing AND\n   *    - the consent element for the missing consent also exists\n   *      (it doesn't exist for instance if tracking code not set im BE)\n   * if so, this means the consent has expired and we need to show the widget again\n   */\n  firstUpdated() {\n    this.consentTypeNames.forEach((consentTypeName) => {\n      const consentChildElement = this.querySelector(`toujou-consent[consenttype=\"${consentTypeName}\"]`);\n      // eslint-disable-next-line max-len\n      if (this._state.consents.consentBoxDismissed && !this._state.consents[consentTypeName] && consentChildElement) {\n        this._undismissConsentBox();\n      }\n    });\n  }\n\n  /**\n   * This function runs each time the store changes\n   */\n  onStateChange() {\n    this._state = this.store.getState();\n    this._dismissedBox = this._state.consents.consentBoxDismissed;\n\n    this._updateAllConsentElementsStates();\n  }\n\n  /**\n   * Handle events on the toujou-consent-widget element\n   */\n  _handleEvent(event) {\n    event.stopPropagation();\n\n    // Click on save button in 'consent-box'\n    if (event.type === 'click' && !this._inPage && event.target.matches(this.listenOn)) {\n      this._handleConsentBoxSaveButtonClick(event.target);\n    }\n  }\n\n  /**\n   * React to the 'toujou-consent-checkbox-changed' event sent by a child 'toujou-consent'\n   * when a checkbox status has changed\n   */\n  _handleConsentCheckboxChanged(event) {\n    // Check if the element is in page and make sure the consent box has been dismissed\n    if (this.inPage && this._state.consents.consentBoxDismissed === true) {\n      this._prepareToSaveConsents();\n      this._dispatchAddSnackbar(event.target.getAttribute('snackbarmessage'));\n    }\n  }\n\n  /**\n   * Handle click on the \"Save\" button\n   * The 'save' button shows only on the 'consent-box' version of the toujou-consent-widget\n   * A click on this button triggers a consent save and dismisses the 'consent-box'\n   */\n  _handleConsentBoxSaveButtonClick(button) {\n    this._prepareToSaveConsents(button.hasAttribute('accept-all') ? true : null);\n    this._dismissConsentBox();\n  }\n\n  /**\n   * Before we can save a consent change to the store there are some actions we need to take:\n   *    - Get the current consent status\n   *    - Call the function to save the consents\n   */\n  _prepareToSaveConsents(overrideStatus = null) {\n    const newConsents = this._getAllConsents(overrideStatus);\n    this._saveAllConsents(newConsents);\n  }\n\n  /**\n   * Get all the consent states so we can save them to the store\n   */\n  _getAllConsents(overrideStatus = null) {\n    const newConsents = {};\n    const consentElements = this.querySelectorAll('toujou-consent');\n    // eslint-disable-next-line no-unused-expressions\n    consentElements && consentElements.forEach((consentElement) => {\n      const consentType = consentElement.getAttribute('consenttype');\n      newConsents[consentType] = this._createNewConsentData(consentElement, overrideStatus);\n    });\n    return newConsents;\n  }\n\n  /**\n   * Create the new consent data for a consentType\n   * It returns an object ready to be dispatched to the store\n   */\n  _createNewConsentData(consentElement, overrideStatus = null) {\n    const consentCheckbox = consentElement.querySelector('.consent__checkbox');\n    if (overrideStatus !== null) {\n      consentCheckbox.checked = overrideStatus;\n    }\n    const consentLifetime = this._createConsentLifeInMillis(consentElement.getAttribute('consenttype'), consentElement.getAttribute('consentlifetime'));\n    const consentStatus = consentCheckbox.checked;\n\n    return {\n      consentGiven: consentStatus,\n      consentCreationDate: Date.now(),\n      consentExpirationDate: Date.now() + consentLifetime,\n      consentLifetime,\n    };\n  }\n\n  /**\n   * Return the consent Lifetime in milliseconds\n   * External content consents have daytime in 'days'\n   * Tracking consent has lifetime '0' for default (2 Years) and '1' for session\n   * @returns {number}\n   */\n  // eslint-disable-next-line class-methods-use-this\n  _createConsentLifeInMillis(consentType, consentLifetime) {\n    if (consentType === 'tracking') {\n      return consentLifetime === '0' ? 24 * 60 * 60 * 1000 * 730 : 0;\n    }\n\n    return consentLifetime * 24 * 60 * 60;\n  }\n\n  /**\n   * Call store action to dismiss the consent box\n   */\n  _dismissConsentBox() {\n    this.store.dispatch(dismissConsentBox());\n    this._dispatchConsentWidgetDismissedEvent();\n  }\n\n  /**\n   * Call store action to \"undismiss\" the consent box\n   */\n  _undismissConsentBox() {\n    this.store.dispatch(undismissConsentBox());\n  }\n\n  /**\n   * Call store action to update the values of all consent types at the same time\n   */\n  _saveAllConsents(newConsents) {\n    this.store.dispatch(saveAllConsents(newConsents));\n  }\n\n  /**\n   * React to the 'toujou-consent-connect' event,\n   * sent by a 'toujou-consent' element when it is ready\n   */\n  _handleConsentConnected(event) {\n    this._setConsentElementState(event.target);\n  }\n\n  /**\n   * Set the correct (checkbox) state on a child 'toujou-consent' element\n   */\n  _setConsentElementState(consentElement) {\n    if (consentElement.tagName === 'TOUJOU-CONSENT') {\n      const consentType = consentElement.getAttribute('consenttype');\n      const preChecked = consentElement.getAttribute('prechecked') === '1';\n      // eslint-disable-next-line no-param-reassign\n      consentElement.consentState = this._getConsentTypeState(this._state, consentType, preChecked);\n    }\n  }\n\n  /**\n   * Update all the consent states at once.\n   * This is used on the 'consent-box' when the 'save' button is clicked\n   */\n  _updateAllConsentElementsStates() {\n    const consentElements = this.querySelectorAll('toujou-consent');\n    consentElements.forEach((consentElement) => {\n      this._setConsentElementState(consentElement);\n    });\n  }\n\n  /**\n   * Get consent type state\n   * taking into account the current consent state, if it is valid or not and the pre-checked state\n   */\n  _getConsentTypeState(state, consentType, preChecked) {\n    let consentTypeData = null;\n    if (!state || !state.consents || !state.consents[consentType]) {\n      consentTypeData = null;\n    } else {\n      consentTypeData = state.consents[consentType];\n    }\n\n    if (!consentTypeData) {\n      return preChecked;\n    }\n\n    if (consentTypeData && this._isConsentExpired(consentTypeData)) {\n      this.store.dispatch(clearConsentTypeData(consentType));\n      this._dispatchConsentExpiredEvent(consentType);\n      this._undismissConsentBox();\n      return preChecked;\n    }\n\n    if (consentTypeData && !this._isConsentExpired(consentTypeData)) {\n      return consentTypeData.consentGiven;\n    }\n\n    return consentTypeData;\n  }\n\n  /**\n   * Check if a consent's lifetime has expired\n   * @returns {boolean}\n   */\n  // eslint-disable-next-line class-methods-use-this\n  _isConsentExpired(consentData) {\n    // eslint-disable-next-line max-len\n    return (consentData.consentCreationDate + consentData.consentLifetime > consentData.consentExpirationDate);\n  }\n\n  /**\n   * Dispatch a custom event when a consent expires, so other elements can react to it.\n   */\n  _dispatchConsentExpiredEvent(consentType) {\n    const consentExpiredEvent = new CustomEvent('toujou-consent-expired', {\n      bubbles: true,\n      composed: true,\n      detail: {\n        consentType,\n      },\n    });\n    this.dispatchEvent(consentExpiredEvent);\n  }\n\n  /**\n   * Dispatch event to add a snackbar\n   */\n  _dispatchAddSnackbar(snackbarMessage) {\n    const addSnackbarEvent = new CustomEvent('toujou-add-snackbar', {\n      bubbles: true,\n      composed: true,\n      detail: {\n        message: snackbarMessage,\n        type: 'auto',\n        duration: 2500,\n        variant: 'success',\n      },\n    });\n    this.dispatchEvent(addSnackbarEvent);\n  }\n\n  /**\n   * Dispatch a custom event when a consent expires,\n   * so other elements can react to it.\n   */\n  _dispatchConsentWidgetDismissedEvent() {\n    const consentWidgetDismissedEvent = new CustomEvent('toujou-consent-widget-dismissed', {\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(consentWidgetDismissedEvent);\n  }\n\n  /**\n   * Dispatch a custom event when the consent box is deactivated,\n   * so other elements can react to it.\n   * It is deactivated when the users choose it on the BE.\n   */\n  _dispatchConsentDeactivated() {\n    const consentWidgetDeactivatedEvent = new CustomEvent('toujou-consent-widget-deactivated', {\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(consentWidgetDeactivatedEvent);\n  }\n}\n\ncustomElements.define(ToujouConsentWidget.is, ToujouConsentWidget);\n"],"names":["ToujouConsentWidgetStyles","css","ToujouConsentWidget","LitElement","html","value","events","eventName","props","consentsStore","consentTypeName","consentChildElement","event","button","overrideStatus","newConsents","consentElements","consentElement","consentType","consentCheckbox","consentLifetime","dismissConsentBox","undismissConsentBox","saveAllConsents","preChecked","state","consentTypeData","clearConsentTypeData","consentData","consentExpiredEvent","snackbarMessage","addSnackbarEvent","consentWidgetDismissedEvent","consentWidgetDeactivatedEvent","__publicField"],"mappings":"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"}