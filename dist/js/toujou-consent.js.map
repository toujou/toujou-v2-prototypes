{"version":3,"file":"toujou-consent.js","sources":["../../src/components/copied/toujou-consent/toujou-consent.styles.js","../../src/components/copied/toujou-consent/toujou-consent.js"],"sourcesContent":["import { css } from \"lit\";\n\nexport const ToujouConsentStyles = css`\n  :host {\n    display: var(--toujou-consent-display, block);\n  }\n`;","import { LitElement, html } from 'lit';\nimport { ToujouConsentStyles } from \"./toujou-consent.styles.js\";\n\nclass ToujouConsent extends LitElement {\n  static get is() {\n    return 'toujou-consent';\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  render() {\n    return html`\n      <slot id=\"content\"></slot>\n    `;\n  }\n\n  static styles = [ToujouConsentStyles];\n\n  static get styles() {\n    return styles;\n  }\n\n  static get properties() {\n    return {\n      consentState: {\n        type: Boolean,\n      },\n      listenTo: {\n        type: String,\n      },\n      listenOn: {\n        type: String,\n      },\n    };\n  }\n\n  set consentState(state) {\n    if (this.consentInputType === 'checkbox') {\n      this.querySelector('.consent__checkbox').checked = state;\n    }\n  }\n\n  set listenTo(events) {\n    events.split(/\\s+/).forEach((eventName) => {\n      this.addEventListener(eventName, this._handleEvent);\n    });\n  }\n\n  constructor(props) {\n    super(props);\n\n    this._handleEvent = this._handleEvent.bind(this);\n    this.listenOn = '*';\n    this._consentType = this.getAttribute('consenttype');\n    this._consentInputType = this._getConsentInputType();\n    this.consentState = null;\n  }\n\n  /**\n   * This function fires when the component is appended to the document.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  /**\n   * Handle the different kinds of event\n   */\n  _handleEvent(event) {\n    if (event.type === 'click') {\n      this._dispatchClickEvent();\n    } else if (event.type === 'change') {\n      this._dispatchChangeEvent();\n    }\n  }\n\n  /**\n   * We need to dispatch the ready event inside the firstUpdated,\n   * instead of the connectedCallback, because otherwise there is\n   * a timing conflict in IE and Edge (can't listen to the event)\n   */\n  firstUpdated() {\n    this._dispatchReadyEvent();\n  }\n\n  /**\n   * Dispatch a 'toujou-consent-checkbox-changed' event when a checkbox is clicked\n   * so other elements can react to it\n   */\n  _dispatchChangeEvent() {\n    const newChangeEvent = new CustomEvent('toujou-consent-checkbox-changed', {\n      bubbles: true,\n      composed: true,\n      detail: {\n        consentElement: this,\n      },\n    });\n    this.dispatchEvent(newChangeEvent);\n  }\n\n  /**\n   * Dispatch a 'toujou-consent-button-clicked' when a button is clicked\n   * so other elements can react to it\n   */\n  _dispatchClickEvent() {\n    const newClickEvent = new CustomEvent('toujou-consent-button-clicked', {\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(newClickEvent);\n  }\n\n  /**\n   * Dispatch a 'toujou-consent-connect' event so other elements know that\n   * the toujou-consent element is ready\n   */\n  _dispatchReadyEvent() {\n    const consentReadyEvent = new CustomEvent('toujou-consent-connected', {\n      bubbles: true,\n      composed: true,\n      detail: {\n        consentType: this._consentType,\n      },\n    });\n    this.dispatchEvent(consentReadyEvent);\n  }\n\n  /**\n   * The toujou-consent can have two types of inputs: checkbox or button\n   * Here we set the correct content type to the element\n   */\n  _getConsentInputType() {\n    const consentCheckboxes = this.querySelectorAll('.consent__checkbox');\n    const consentButtons = this.querySelectorAll('.consent__button');\n    if (consentCheckboxes.length > 0) {\n      this.consentInputType = 'checkbox';\n    } else if (consentButtons.length > 0) {\n      this.consentInputType = 'button';\n    }\n  }\n}\n\ncustomElements.define(ToujouConsent.is, ToujouConsent);\n"],"names":["ToujouConsentStyles","css","ToujouConsent","LitElement","html","state","events","eventName","props","event","newChangeEvent","newClickEvent","consentReadyEvent","consentCheckboxes","consentButtons","__publicField"],"mappings":"oOAEO,MAAMA,EAAsBC;AAAAA;AAAAA;AAAAA;AAAAA,ECCnC,MAAMC,UAAsBC,CAAW,CACrC,WAAW,IAAK,CACd,MAAO,gBACR,CAGD,QAAS,CACP,OAAOC;AAAAA;AAAAA,KAGR,CAID,WAAW,QAAS,CAClB,OAAO,MACR,CAED,WAAW,YAAa,CACtB,MAAO,CACL,aAAc,CACZ,KAAM,OACP,EACD,SAAU,CACR,KAAM,MACP,EACD,SAAU,CACR,KAAM,MACP,CACP,CACG,CAED,IAAI,aAAaC,EAAO,CAClB,KAAK,mBAAqB,aAC5B,KAAK,cAAc,oBAAoB,EAAE,QAAUA,EAEtD,CAED,IAAI,SAASC,EAAQ,CACnBA,EAAO,MAAM,KAAK,EAAE,QAASC,GAAc,CACzC,KAAK,iBAAiBA,EAAW,KAAK,YAAY,CACxD,CAAK,CACF,CAED,YAAYC,EAAO,CACjB,MAAMA,CAAK,EAEX,KAAK,aAAe,KAAK,aAAa,KAAK,IAAI,EAC/C,KAAK,SAAW,IAChB,KAAK,aAAe,KAAK,aAAa,aAAa,EACnD,KAAK,kBAAoB,KAAK,uBAC9B,KAAK,aAAe,IACrB,CAKD,mBAAoB,CAClB,MAAM,kBAAiB,CACxB,CAKD,aAAaC,EAAO,CACdA,EAAM,OAAS,QACjB,KAAK,oBAAmB,EACfA,EAAM,OAAS,UACxB,KAAK,qBAAoB,CAE5B,CAOD,cAAe,CACb,KAAK,oBAAmB,CACzB,CAMD,sBAAuB,CACrB,MAAMC,EAAiB,IAAI,YAAY,kCAAmC,CACxE,QAAS,GACT,SAAU,GACV,OAAQ,CACN,eAAgB,IACjB,CACP,CAAK,EACD,KAAK,cAAcA,CAAc,CAClC,CAMD,qBAAsB,CACpB,MAAMC,EAAgB,IAAI,YAAY,gCAAiC,CACrE,QAAS,GACT,SAAU,EAChB,CAAK,EACD,KAAK,cAAcA,CAAa,CACjC,CAMD,qBAAsB,CACpB,MAAMC,EAAoB,IAAI,YAAY,2BAA4B,CACpE,QAAS,GACT,SAAU,GACV,OAAQ,CACN,YAAa,KAAK,YACnB,CACP,CAAK,EACD,KAAK,cAAcA,CAAiB,CACrC,CAMD,sBAAuB,CACrB,MAAMC,EAAoB,KAAK,iBAAiB,oBAAoB,EAC9DC,EAAiB,KAAK,iBAAiB,kBAAkB,EAC3DD,EAAkB,OAAS,EAC7B,KAAK,iBAAmB,WACfC,EAAe,OAAS,IACjC,KAAK,iBAAmB,SAE3B,CACH,CA5HEC,EAZIb,EAYG,SAAS,CAACF,CAAmB,GA8HtC,eAAe,OAAOE,EAAc,GAAIA,CAAa"}