{"version":3,"file":"toujou-inpage-nav.js","sources":["../../src/components/copied/toujou-inpage-nav/toujou-inpage-nav-getBreakpoint.js","../../src/components/copied/toujou-inpage-nav/toujou-inpage-nav.js"],"sourcesContent":["/**\n * Get combined width of all navigation items\n *\n * @returns {number}\n * @private\n */\nfunction getNavItemsWidth(navItems) {\n  let navWidth = 0;\n  Object.keys(navItems).forEach((navItem) => {\n    const itemCS = getComputedStyle(navItems[navItem].item);\n    const horizontalPadding = parseFloat(itemCS.paddingLeft) + parseFloat(itemCS.paddingRight);\n    navWidth += navItems[navItem].item.offsetWidth + horizontalPadding;\n  });\n  return navWidth;\n}\n\n/**\n * Get width of an element\n *\n * @returns {number}\n * @private\n */\nfunction getElementWidth(element) {\n  if (!element) {\n    return 0;\n  }\n  if (element.classList.contains('inpage-nav__label')) {\n    const itemCS = getComputedStyle(element);\n    const horizontalPadding = parseFloat(itemCS.paddingLeft) + parseFloat(itemCS.paddingRight);\n    return element.offsetWidth + horizontalPadding;\n  }\n  return element.offsetWidth;\n}\n\n/**\n * Get inpage nav breakpoint\n * If the nav is centered we have to account for the cta button (\"on each side\" + a little buffer)\n *\n * @returns {number}\n * @private\n */\nexport default function getNavBreakpoint(navItems, navLabel, ctaElement, isCentered) {\n  // eslint-disable-next-line max-len\n  return getNavItemsWidth(navItems) + getElementWidth(navLabel) + getElementWidth(ctaElement) * (isCentered ? 3 : 1);\n}\n","import { html, LitElement } from 'lit';\nimport getNavBreakpoint from './toujou-inpage-nav-getBreakpoint.js';\n\nclass ToujouInpageNav extends LitElement {\n  static get is() {\n    return 'toujou-inpage-nav';\n  }\n\n  render() {\n    return html`\n      <slot></slot>\n      <slot name=\"cta\" id=\"cta\"></slot>\n    `;\n  }\n\n  static get properties() {\n    return {\n      isMobile: {\n        type: Boolean,\n        reflect: true,\n      },\n      mobileOpen: {\n        type: Boolean,\n        reflect: true,\n      },\n      _currentSectionID: {\n        type: String,\n      },\n      _targetSections: {\n        type: Map,\n      },\n    };\n  }\n\n  /**\n   * When the _currentSectionId changes we should change nav element to reflect new state\n   *\n   * @param value\n   * @private\n   */\n  set _currentSectionID(value) {\n    if (!this._navItems) return;\n\n    if (!value) {\n      this._updateLabelVisibility(false);\n      this._updateNavItemsState(null);\n    } else if (this._previousCurrentSectionID !== value) {\n      this._updateLabelVisibility(value);\n      this._updateNavItemsState(value);\n    }\n  }\n\n  constructor() {\n    super();\n\n    this.mobileBreakpointOffset = this._getMobileBreakpointOffset(); // in pixels\n    this._currentSectionID = null;\n    this._previousCurrentSectionID = null;\n    this._isCentered = this.hasAttribute('centered');\n    this._isAuto = this.hasAttribute('is-auto');\n    this._targetSections = new Map();\n    this._rootMarginsSize = -200;\n\n    setTimeout(() => {\n      this._init();\n    });\n  }\n\n  /**\n   * Remove event listeners when the element disconnect from page\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    window.removeEventListener('resize', this._checkIsMobileState.bind(this));\n    this._toggle.removeEventListener('click', this._mobileOpenToggle.bind(this));\n    this.addEventListener('click', this._handleNavClick.bind(this));\n  }\n\n  /**\n   * Watch for attribute changes so we can update the aria attribute values\n   *\n   * @param name\n   * @param old\n   * @param value\n   */\n  attributeChangedCallback(name, old, value) {\n    super.attributeChangedCallback(name, old, value);\n    if (name === 'ismobile' || name === 'mobileopen') {\n      this._updateAriaAttributes(name, value);\n    }\n  }\n\n  /**\n   * Initialize the inpage navigation item\n   *    - Get child elements\n   *    - add intersection observers\n   *    - set event listeners\n   *\n   * @private\n   */\n  _init() {\n    this._getChildrenElements();\n    if (!this._navItems) {\n      console.error('Could not initialize the inpage-nav. Error: No nav items!!!');\n      return;\n    }\n\n    this._toggle = this.querySelector('.inpage-nav__toggle');\n    this._checkIsMobileState();\n    this._addTargetObservers();\n\n    window.addEventListener('resize', this._checkIsMobileState.bind(this));\n    this._toggle.addEventListener('click', this._mobileOpenToggle.bind(this));\n    this.addEventListener('click', this._handleNavClick.bind(this));\n  }\n\n  /**\n   * Get nav items information: item, item link and item link target\n   *\n   * @private\n   */\n  _getChildrenElements() {\n    this._navItems = {};\n    this._navLabel = this.querySelector('.inpage-nav__label') || null;\n    this._cta = this.querySelector('[slot=\"cta\"]');\n    const allNavItems = this.querySelectorAll('.inpage-nav__item') || null;\n    allNavItems.forEach((navItem, i) => {\n      const navItemLink = navItem.querySelector('a');\n      const navItemLinkHref = navItemLink.getAttribute('href');\n      this._navItems[i] = {\n        item: navItem,\n        link: navItemLinkHref,\n        target: document.querySelector(navItemLinkHref),\n      };\n    });\n  }\n\n  /**\n   * Check if there is enough place to show the navigation items side by side\n   * so we can toggle the isMobile attribute accordingly\n   *\n   * @private\n   */\n  _checkIsMobileState() {\n    this.isMobile = false;\n    window.requestAnimationFrame(() => {\n      this._navBreakpoint = getNavBreakpoint(this._navItems, this._navLabel, this._cta, this._isCentered);\n      this.isMobile = this._navBreakpoint > (this.offsetWidth - this.mobileBreakpointOffset);\n    });\n  }\n\n  /**\n   * Create an intersection observer for the target section of each navigation item\n   * If the target itself doesn't have an id,\n   * we observe the next Sibling\n   *\n   * @private\n   */\n  _addTargetObservers() {\n    const options = {\n      rootMargin: `${this._rootMarginsSize}px 0px ${this._rootMarginsSize}px 0px`,\n      threshold: this._createThresholdList(50),\n    };\n    this.observer = new IntersectionObserver(this._handleObserver.bind(this), options);\n\n    Object.keys(this._navItems).forEach((navItem) => {\n      const targetElement = this._navItems[navItem].target;\n\n      if (!(targetElement instanceof HTMLElement)) {\n        return;\n      }\n\n      this._targetSections.set(targetElement, false);\n\n      const elementToObserve = targetElement.hasAttribute('id')\n        ? targetElement\n        : targetElement.nextElementSibling;\n\n      this.observer.observe(elementToObserve);\n    });\n  }\n\n  /**\n   * Generate a threshold list for the observer base on a number of steps\n   *\n   * @param numberOfSteps\n   * @returns {[number]}\n   * @private\n   */\n  _createThresholdList(numberOfSteps) {\n    return [...Array(numberOfSteps).keys()].map((x) => x / numberOfSteps);\n  }\n\n  /**\n   * Handle intersection observers change\n   * Add / remove attribute when target sections came or leave view\n   *\n   * @param entries\n   * @private\n   */\n  _handleObserver(entries) {\n    entries.forEach((entry) => {\n      this._targetSections.set(entry.target, entry.isIntersecting);\n    });\n\n    this._updateSectionsAttributes();\n    this._updateActiveItemUI();\n  }\n\n  /**\n   * Update the attribute on the section according to their visibility\n   *\n   * @private\n   */\n  _updateSectionsAttributes() {\n    let firstOneIsVisible = false;\n    this._targetSections.forEach((isVisible, element) => {\n      element.toggleAttribute('inpageNavTargetVisible', firstOneIsVisible ? false : (isVisible));\n      if (isVisible && !firstOneIsVisible) {\n        firstOneIsVisible = isVisible;\n      }\n    });\n  }\n\n  /**\n   * Update the navbar items to highlight the currently active item\n   * (corresponding to the visible section)\n   *\n   * @private\n   */\n  _updateActiveItemUI() {\n    const firstVisibleSection = document.querySelector('*[inpageNavTargetVisible]') || null;\n    if (firstVisibleSection) {\n      this._currentSectionID = `#${firstVisibleSection.id.toString()}`;\n    } else if (!firstVisibleSection && this._navLabel) {\n      this._currentSectionID = null;\n    } else if (!firstVisibleSection && !this._navLabel) {\n      this._currentSectionID = this._navItems[0].link;\n    }\n  }\n\n  /**\n   * Toggle the mobileOpen attribute\n   *\n   * @private\n   */\n  _mobileOpenToggle() {\n    this.mobileOpen = !this.mobileOpen;\n  }\n\n  /**\n   * handle click on a navigation item\n   *    - close nav\n   *    - smooth scroll to target\n   *\n   * @param event\n   * @private\n   */\n  _handleNavClick(event) {\n    const clickedElement = event.target;\n    if (clickedElement.classList.contains('inpage-nav__link')) {\n      this.mobileOpen = false;\n    }\n  }\n\n  /**\n   * Update aria attributes when the relevant property changes\n   *\n   * @param propertyName\n   * @private\n   */\n  _updateAriaAttributes(propertyName) {\n    if (propertyName === 'mobileopen') {\n      this._toggle.setAttribute('aria-expanded', this.mobileOpen);\n    } else if (propertyName === 'ismobile') {\n      this._toggle.setAttribute('aria-hidden', !this.isMobile);\n    }\n  }\n\n  /**\n   * Update the label visibility status\n   *\n   * @param value\n   * @private\n   */\n  _updateLabelVisibility(value) {\n    if (this._navLabel) {\n      if (!value) {\n        this._navLabel.setAttribute('visible', '');\n      } else {\n        this._navLabel.removeAttribute('visible');\n      }\n    }\n  }\n\n  /**\n   * Update currently active nav item\n   *\n   * @param value\n   * @private\n   */\n  _updateNavItemsState(value) {\n    const currentActiveItem = this.querySelector('.inpage-nav__item[active]');\n    if (currentActiveItem) {\n      currentActiveItem.removeAttribute('active');\n      currentActiveItem.removeAttribute('aria-current');\n    }\n    Object.keys(this._navItems).forEach((navItem) => {\n      if (this._navItems[navItem].link === value) {\n        this._navItems[navItem].item.setAttribute('active', '');\n        this._navItems[navItem].item.setAttribute('aria-current', 'true');\n      }\n    });\n    this._previousCurrentSectionID = value;\n  }\n\n  /**\n   * Get inpagevav breakpoint offset value from the corresponding CSS Variable\n   *\n   * @returns {number}\n   * @private\n   */\n  _getMobileBreakpointOffset() {\n    const cStyles = getComputedStyle(document.documentElement);\n    return parseInt(cStyles.getPropertyValue('--toujou-inpage-nav-breakpoint-offset') || 180, 10);\n  }\n}\n\ncustomElements.define(ToujouInpageNav.is, ToujouInpageNav);\n"],"names":["getNavItemsWidth","navItems","navWidth","navItem","itemCS","horizontalPadding","getElementWidth","element","getNavBreakpoint","navLabel","ctaElement","isCentered","ToujouInpageNav","LitElement","html","value","name","old","navItemLinkHref","options","targetElement","elementToObserve","numberOfSteps","x","entries","entry","firstOneIsVisible","isVisible","firstVisibleSection","event","propertyName","currentActiveItem","cStyles"],"mappings":"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"}