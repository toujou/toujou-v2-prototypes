{"version":3,"file":"toujou-overlay.js","sources":["../../src/components/toujou-overlay/toujou-overlay.ts"],"sourcesContent":["import { LitElement } from 'lit'\nimport { customElement, property } from 'lit/decorators.js'\n\n@customElement('toujou-overlay')\nexport class ToujouOverlay extends LitElement {\n    @property({ type: String })\n    _overlayId: string | null = null;\n\n    @property({ type: HTMLElement })\n    _warningEl: Element | null = null;\n\n    @property({ type: HTMLElement })\n    _closeButton: Element | null = null;\n\n    @property({ type: Array })\n    _buttons: Element[] = [];\n\n    @property({ type: String })\n    _overlayCookie: string | false = false;\n\n    @property({ type: String })\n    _state: string = 'open';\n\n    private COOKIE_STATES = {\n        ACCEPTED: 'accepted',\n        REJECTED: 'rejected',\n    }\n\n    private STATE = {\n        OPEN: 'open',\n        CLOSED: 'closed'\n    }\n\n    protected createRenderRoot(): Element | ShadowRoot {\n        return this;\n    }\n\n    constructor() {\n        super();\n\n        this._handleButtonClick = this._handleButtonClick.bind(this);\n        this._handleCloseButtonClick = this._handleCloseButtonClick.bind(this);\n    }\n\n    /**\n     * Set correct internal state value and show / hide overlay accordingly\n     * @param value\n     */\n    // @ts-ignore\n    set state(value) {\n        this._state = value;\n        this._state === this.STATE.OPEN ? this._showOverlay() : this._hideOverlay();\n    }\n\n    /**\n     * Get value from internal state\n     */\n    // @ts-ignore\n    get state() {\n        return this._state;\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this._getElements();\n\n        if (location.hash === '#aaa') {\n            this._setCookie(this.COOKIE_STATES.ACCEPTED);\n        }\n\n        this._overlayCookie = this._checkCookie('toujou-overlay-' + this._overlayId)\n\n        if (this._buttons.length) {\n            this._buttons.forEach((button) => {\n                button.addEventListener('click', this._handleButtonClick)\n            })\n        }\n\n        if (this._closeButton) {\n            this._closeButton.addEventListener('click', this._handleCloseButtonClick)\n        }\n\n        if (!this._overlayCookie) {\n            this.state = this.STATE.OPEN;\n        } else if (this._overlayCookie === this.COOKIE_STATES.REJECTED) {\n            this.state = this.STATE.OPEN;\n        } else if (this._overlayCookie === this.COOKIE_STATES.ACCEPTED) {\n            this.state = this.STATE.CLOSED;\n        }\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n\n        if (this._buttons.length) {\n            this._buttons.forEach((button) => {\n                button.removeEventListener('click', this._handleButtonClick);\n            })\n        }\n\n        if (this._closeButton) {\n            this._closeButton.removeEventListener('click', this._handleCloseButtonClick);\n        }\n    }\n\n    /**\n     * Close overlay when the close button is clicked\n     */\n    _handleCloseButtonClick() {\n        this.state = this.STATE.CLOSED;\n        this._setCookie(this.COOKIE_STATES.ACCEPTED)\n    }\n\n    /**\n     * Check which button was clicked and set state accordingly\n     * @param event\n     */\n    _handleButtonClick(event: Event) {\n        event.preventDefault();\n        const target = event?.target as HTMLButtonElement;\n        const choice: string | null = target.getAttribute('data-overlay-value') || null;\n\n\n        if (choice === 'no') {\n            this.state = this.STATE.OPEN;\n            this._setCookie(this.COOKIE_STATES.REJECTED);\n            this._showWarning();\n        } else if (choice === 'yes') {\n            this.state = this.STATE.CLOSED;\n            this._setCookie(this.COOKIE_STATES.ACCEPTED);\n        }\n        target.blur();\n    }\n\n    /**\n     * Get necessary elements\n     */\n    _getElements(): void {\n        this._overlayId = this.getAttribute('id') || null;\n        this._warningEl = this.querySelector('.overlay__warning');\n        this._closeButton = this.querySelector('.overlay__close-button');\n        this._buttons = Array.from(this.querySelectorAll('.overlay__buttons .button'));\n    }\n\n    /**\n     * Set cookie with the correct name and state\n     * @param choice\n     */\n    _setCookie(choice: string): void {\n        document.cookie = `toujou-overlay-${this._overlayId}=${choice};path=/;`;\n    }\n\n    /**\n     * Get cookie for the current overlay\n     * @param cookieName\n     */\n    _checkCookie(cookieName: string): string | false {\n        const match = document.cookie.match(new RegExp('(^| )' + cookieName + '=([^;]+)'));\n        return match ? match[2] : false;\n    }\n\n    /**\n     * Show overlay by setting the style and preventing body scroll in background\n     */\n    _showOverlay() {\n        this.style.display = 'flex';\n        document.body.setAttribute('overlay-open', '');\n    }\n\n    /**\n     * Hide overlay by setting display to none, allow body scroll again\n     */\n    _hideOverlay() {\n        this.style.display = 'none';\n        document.body.removeAttribute('overlay-open');\n    }\n\n    /**\n     * Add attribute to show warning and hide the buttons\n     */\n    _showWarning() {\n        this.setAttribute('warning-visible', '');\n    }\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'toujou-overlay': ToujouOverlay\n    }\n}\n"],"names":["LitElement","property","customElement"],"mappings":"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"}