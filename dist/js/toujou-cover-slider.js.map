{"version":3,"file":"toujou-cover-slider.js","sources":["../../src/components/toujou-cover-slider/toujou-cover-slider.ts"],"sourcesContent":["import { LitElement } from \"lit\";\nimport { customElement, property } from 'lit/decorators.js';\nimport Splide from \"@splidejs/splide\";\n\n@customElement('toujou-cover-slider')\nexport class ToujouCoverSlider extends LitElement {\n\n    @property({ type: Object })\n    splideContainer: HTMLElement | null = null;\n\n    @property()\n    private splideSlider: any;\n\n    @property({ type: Number })\n    private _maxCardWidth: number | null = null;\n\n    @property({ type: Number })\n    private _cardGap: number | null = null;\n\n    @property({ type: Number })\n    private _cardWidthWithGap: number | null = null;\n\n    @property({ type: Number })\n    private _sliderWidth: number | null = null;\n\n    @property({ type: Number })\n    private _slidesThatFitIntoScreen: number | null = null;\n\n    @property({ type: Number })\n    private _numberOfSlidesInSlider: number = 0;\n\n    @property({ type: Boolean, reflect: true, attribute: 'is-slider' })\n    private _isSlide: boolean = false;\n\n    @property({ type: ResizeObserver })\n    private _resizeObserver: ResizeObserver | null = null;\n\n    constructor() {\n        super();\n\n        // Update the cover slider UI whenever the element changes size\n        this._resizeObserver = new ResizeObserver((entries) => {\n            entries.forEach(() => this._updateUI());\n        });\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this._resizeObserver!.observe(this);\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this._resizeObserver!.unobserve(this);\n    }\n\n    /**\n     * Disable shadow root\n     */\n    createRenderRoot() { return this; }\n\n    firstUpdated() {\n        this._updateCustomProperties();\n        this._numberOfSlidesInSlider = this.querySelectorAll('.cover-slider__item').length;\n        this.splideContainer = this.querySelector('.splide') || null;\n\n        if (!this.splideContainer) {\n            console.error(\"TOUJOU: Could not get necessary elements to initialize the slider\");\n            return;\n        } else {\n            this._initSlider();\n            this._updateUI();\n        }\n    }\n\n    /**\n     * Initialize the cover slider element with the correct options\n     * @private\n     */\n    private _initSlider = () => {\n        this._slidesThatFitIntoScreen = this._calculateSlidesThatFitIntoScreen();\n\n        const sliderOptions = {\n            classes: {\n                pagination: 'splide__pagination slider-bullets',\n                page: 'splide__pagination__page slider-bullets__bullet',\n            },\n            type: this._isSlide ? 'loop' : 'slide',\n            autoplay: false,\n            perPage: Math.floor(this._slidesThatFitIntoScreen),\n            perMove: 1,\n            gap: this._cardGap,\n            padding: {\n                right: this._calculatePadding()\n            },\n            width: this._cardWidthWithGap,\n            reducedMotion: {\n                speed: 0,\n                rewindSpeed: 0,\n                autoplay: 'pause'\n            },\n        }\n\n        // @ts-ignore\n        this.splideSlider = new Splide(this.splideContainer, sliderOptions);\n\n        this.splideSlider!.on('mounted', this._handleSliderMount);\n\n        this.splideSlider!.mount();\n    }\n\n    /**\n     * Setup the count element when the element first mounts\n     */\n    private _handleSliderMount = () => {\n        this._removeSlidesTabpanelRole();\n\n        this.dispatchEvent(new CustomEvent('toujou-cover-slider-mounted', {\n            bubbles: true,\n            composed: true,\n            detail: {\n                el: this.splideSlider\n            }\n        }));\n    }\n\n    /**\n     * Update the slider options by destroying it and creating it again\n     */\n    private _updateSliderOptions = () => {\n        if (this.splideSlider) {\n            this.splideSlider.destroy();\n            this._initSlider();\n        }\n    }\n\n    /**\n     * Get new values and update the cover slider UI accordingly\n     */\n    private _updateUI() {\n        this._updateCustomProperties();\n        this._isSlide = this._slidesThatFitIntoScreen! <= this._numberOfSlidesInSlider;\n        this._updateSliderOptions();\n    }\n\n    /**\n     * Get current values of the css properties and update private variables\n     */\n    private _updateCustomProperties() {\n        const computedStyles = getComputedStyle(this);\n        this._maxCardWidth = +computedStyles.getPropertyValue('--cover-slider-card-max-width');\n        this._cardGap = +computedStyles.getPropertyValue('--cover-slider-card-gap');\n        this._cardWidthWithGap = this._maxCardWidth + this._cardGap;\n    }\n\n    /**\n     * Calculate how many cards can fit on the screen\n     */\n    private _calculateSlidesThatFitIntoScreen() {\n        this._sliderWidth = this.getBoundingClientRect().width;\n        return Math.ceil(this._sliderWidth / this._cardWidthWithGap!) + 0.5;\n    }\n\n    /**\n     * Calculate padding percentage, so we can show half a card on the right side of the screen\n     */\n    private _calculatePadding() {\n        const numberOfParts = this._slidesThatFitIntoScreen! * 2;\n        return `${100 / numberOfParts}%`;\n    }\n\n    /**\n     * Remove the \"tabpanel\" role from slides to fix accessibility error\n     * @private\n     */\n    private _removeSlidesTabpanelRole() {\n        const elsWithPanelTabRole = this.splideSlider.root.querySelectorAll('*[role=\"tabpanel\"]');\n        if (!elsWithPanelTabRole) return;\n\n        elsWithPanelTabRole.forEach((el: HTMLElement) => {\n            el.removeAttribute('role');\n            el.removeAttribute('aria-label');\n        });\n    }\n}\n"],"names":["ToujouCoverSlider","LitElement","constructor","super","this","splideContainer","_maxCardWidth","_cardGap","_cardWidthWithGap","_sliderWidth","_slidesThatFitIntoScreen","_numberOfSlidesInSlider","_isSlide","_resizeObserver","_initSlider","_calculateSlidesThatFitIntoScreen","sliderOptions","classes","pagination","page","type","autoplay","perPage","Math","floor","perMove","gap","padding","right","_calculatePadding","width","reducedMotion","speed","rewindSpeed","splideSlider","Splide","on","_handleSliderMount","mount","_removeSlidesTabpanelRole","dispatchEvent","CustomEvent","bubbles","composed","detail","el","_updateSliderOptions","destroy","ResizeObserver","entries","forEach","_updateUI","connectedCallback","observe","disconnectedCallback","unobserve","createRenderRoot","firstUpdated","_updateCustomProperties","querySelectorAll","length","querySelector","console","error","computedStyles","getComputedStyle","getPropertyValue","getBoundingClientRect","ceil","elsWithPanelTabRole","root","removeAttribute","__decorateClass","property","Object","prototype","Number","Boolean","reflect","attribute","customElement"],"mappings":"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"}