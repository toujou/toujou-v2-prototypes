{"version":3,"file":"toujou-cover-slider.js","sources":["../../src/components/toujou-cover-slider/toujou-cover-slider.ts"],"sourcesContent":["import { LitElement } from \"lit\";\nimport { customElement, property } from 'lit/decorators.js';\nimport Splide from \"@splidejs/splide\";\n\n@customElement('toujou-cover-slider')\nexport class ToujouCoverSlider extends LitElement {\n\n    @property({ type: Object })\n    splideContainer: HTMLElement | null = null;\n\n    @property()\n    private splideSlider: any;\n\n    @property({ type: Number })\n    private _maxCardWidth: number | null = null;\n\n    @property({ type: Number })\n    private _cardGap: number | null = null;\n\n    @property({ type: Number })\n    private _cardWidthWithGap: number | null = null;\n\n    @property({ type: Number })\n    private _sliderWidth: number | null = null;\n\n    @property({ type: Number })\n    private _slidesThatFitIntoScreen: number | null = null;\n\n    @property({ type: Number })\n    private _numberOfSlidesInSlider: number = 0;\n\n    @property({ type: Boolean, reflect: true, attribute: 'is-slider' })\n    private _isSlide: boolean = false;\n\n    @property({ type: ResizeObserver })\n    private _resizeObserver: ResizeObserver | null = null;\n\n    constructor() {\n        super();\n\n        // Update the cover slider UI whenever the element changes size\n        this._resizeObserver = new ResizeObserver((entries) => {\n            entries.forEach(() => this._updateUI());\n        });\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this._resizeObserver!.observe(this);\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this._resizeObserver!.unobserve(this);\n    }\n\n    /**\n     * Disable shadow root\n     */\n    createRenderRoot() { return this; }\n\n    firstUpdated() {\n        this._updateCustomProperties();\n        this._numberOfSlidesInSlider = this.querySelectorAll('.cover-slider__item').length;\n        this.splideContainer = this.querySelector('.splide') || null;\n\n        if (!this.splideContainer) {\n            console.error(\"TOUJOU: Could not get necessary elements to initialize the slider\");\n            return;\n        } else {\n            this._initSlider();\n            this._updateUI();\n        }\n    }\n\n    /**\n     * Initialize the cover slider element with the correct options\n     * @private\n     */\n    private _initSlider() {\n        this._slidesThatFitIntoScreen = this._calculateSlidesThatFitIntoScreen();\n\n        const sliderOptions = {\n            classes: {\n                pagination: 'splide__pagination slider-bullets',\n                page: 'splide__pagination__page slider-bullets__bullet',\n            },\n            type: this._isSlide ? 'loop' : 'slide',\n            autoplay: false,\n            perPage: Math.floor(this._slidesThatFitIntoScreen),\n            perMove: 1,\n            gap: this._cardGap,\n            padding: {\n                right: this._calculatePadding()\n            },\n            width: this._cardWidthWithGap,\n            reducedMotion: {\n                speed: 0,\n                rewindSpeed: 0,\n                autoplay: 'pause'\n            },\n        }\n\n        // @ts-ignore\n        this.splideSlider = new Splide(this.splideContainer, sliderOptions);\n        this.splideSlider!.mount();\n    }\n\n    /**\n     * Update the slider options by destroying it and creating it again\n     */\n    private _updateSliderOptions() {\n        if (this.splideSlider) {\n            this.splideSlider.destroy();\n            this._initSlider();\n        }\n    }\n\n    /**\n     * Get new values and update the cover slider UI accordingly\n     */\n    private _updateUI() {\n        this._updateCustomProperties();\n        this._isSlide = this._slidesThatFitIntoScreen! <= this._numberOfSlidesInSlider;\n        this._updateSliderOptions();\n    }\n\n    /**\n     * Get current values of the css properties and update private variables\n     */\n    private _updateCustomProperties() {\n        const computedStyles = getComputedStyle(this);\n        this._maxCardWidth = +computedStyles.getPropertyValue('--cover-slider-card-max-width');\n        this._cardGap = +computedStyles.getPropertyValue('--cover-slider-card-gap');\n        this._cardWidthWithGap = this._maxCardWidth + this._cardGap;\n    }\n\n    /**\n     * Calculate how many cards can fit on the screen\n     */\n    private _calculateSlidesThatFitIntoScreen() {\n        this._sliderWidth = this.getBoundingClientRect().width;\n        return Math.ceil(this._sliderWidth / this._cardWidthWithGap!) + 0.5;\n    }\n\n    /**\n     * Calculate padding percentage, so we can show half a card on the right side of the screen\n     */\n    private _calculatePadding() {\n        const numberOfParts = this._slidesThatFitIntoScreen! * 2;\n        return `${100 / numberOfParts}%`;\n    }\n}"],"names":["ToujouCoverSlider","LitElement","entries","sliderOptions","Splide","computedStyles","numberOfParts","__decorateClass","property","customElement"],"mappings":"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"}