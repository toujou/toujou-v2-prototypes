{"version":3,"file":"toujou-cover-slider.js","sources":["../../src/components/toujou-cover-slider/toujou-cover-slider.ts"],"sourcesContent":["import { LitElement } from \"lit\";\nimport { customElement, property } from 'lit/decorators.js';\nimport Splide from \"@splidejs/splide\";\n\n@customElement('toujou-cover-slider')\nexport class ToujouCoverSlider extends LitElement {\n\n    @property({ type: Object })\n    splideContainer: HTMLElement | null = null;\n\n    @property()\n    private splideSlider: any;\n\n    @property({ type: Number })\n    private _maxCardWidth: number | null = null;\n\n    @property({ type: Number })\n    private _cardGap: number | null = null;\n\n    @property({ type: Number })\n    private _cardWidthWithGap: number | null = null;\n\n    @property({ type: Number })\n    private _sliderWidth: number | null = null;\n\n    @property({ type: Number })\n    private _slidesThatFitIntoScreen: number | null = null;\n\n    @property({ type: Number })\n    private _numberOfSlidesInSlider: number = 0;\n\n    @property({ type: Boolean, reflect: true, attribute: 'is-slider' })\n    private _isSlide: boolean = false;\n\n    @property({ type: ResizeObserver })\n    private _resizeObserver: ResizeObserver | null = null;\n\n    constructor() {\n        super();\n\n        // Update the cover slider UI whenever the element changes size\n        this._resizeObserver = new ResizeObserver((entries) => {\n            entries.forEach(() => this._updateUI());\n        });\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this._resizeObserver!.observe(this);\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this._resizeObserver!.unobserve(this);\n    }\n\n    /**\n     * Disable shadow root\n     */\n    createRenderRoot() { return this; }\n\n    firstUpdated() {\n        this._updateCustomProperties();\n        this._numberOfSlidesInSlider = this.querySelectorAll('.cover-slider__item').length;\n        this.splideContainer = this.querySelector('.splide') || null;\n\n        if (!this.splideContainer) {\n            console.error(\"TOUJOU: Could not get necessary elements to initialize the slider\");\n            return;\n        } else {\n            this._initSlider();\n            this._updateUI();\n        }\n    }\n\n    /**\n     * Initialize the cover slider element with the correct options\n     * @private\n     */\n    private _initSlider() {\n        this._slidesThatFitIntoScreen = this._calculateSlidesThatFitIntoScreen();\n\n        const sliderOptions = {\n            classes: {\n                pagination: 'splide__pagination slider-bullets',\n                page: 'splide__pagination__page slider-bullets__bullet',\n            },\n            type: this._isSlide ? 'loop' : 'slide',\n            autoplay: false,\n            perPage: Math.floor(this._slidesThatFitIntoScreen),\n            perMove: 1,\n            gap: this._cardGap,\n            padding: {\n                right: this._calculatePadding()\n            },\n            width: this._cardWidthWithGap,\n            reducedMotion: {\n                speed: 0,\n                rewindSpeed: 0,\n                autoplay: 'pause'\n            },\n        }\n\n        // @ts-ignore\n        this.splideSlider = new Splide(this.splideContainer, sliderOptions);\n        this.splideSlider!.mount();\n    }\n\n    /**\n     * Update the slider options by destroying it and creating it again\n     */\n    private _updateSliderOptions() {\n        if (this.splideSlider) {\n            this.splideSlider.destroy();\n            this._initSlider();\n        }\n    }\n\n    /**\n     * Get new values and update the cover slider UI accordingly\n     */\n    private _updateUI() {\n        this._updateCustomProperties();\n        this._isSlide = this._slidesThatFitIntoScreen! <= this._numberOfSlidesInSlider;\n        this._updateSliderOptions();\n    }\n\n    /**\n     * Get current values of the css properties and update private variables\n     */\n    private _updateCustomProperties() {\n        const computedStyles = getComputedStyle(this);\n        this._maxCardWidth = +computedStyles.getPropertyValue('--cover-slider-card-max-width');\n        this._cardGap = +computedStyles.getPropertyValue('--cover-slider-card-gap');\n        this._cardWidthWithGap = this._maxCardWidth + this._cardGap;\n    }\n\n    /**\n     * Calculate how many cards can fit on the screen\n     */\n    private _calculateSlidesThatFitIntoScreen() {\n        this._sliderWidth = this.getBoundingClientRect().width;\n        return Math.ceil(this._sliderWidth / this._cardWidthWithGap!) + 0.5;\n    }\n\n    /**\n     * Calculate padding percentage, so we can show half a card on the right side of the screen\n     */\n    private _calculatePadding() {\n        const numberOfParts = this._slidesThatFitIntoScreen! * 2;\n        return `${100 / numberOfParts}%`;\n    }\n}"],"names":["ToujouCoverSlider","LitElement","constructor","this","splideContainer","_maxCardWidth","_cardGap","_cardWidthWithGap","_sliderWidth","_slidesThatFitIntoScreen","_numberOfSlidesInSlider","_isSlide","_resizeObserver","ResizeObserver","entries","forEach","_updateUI","connectedCallback","super","observe","disconnectedCallback","unobserve","createRenderRoot","firstUpdated","_updateCustomProperties","querySelectorAll","length","querySelector","_initSlider","console","error","_calculateSlidesThatFitIntoScreen","sliderOptions","classes","pagination","page","type","autoplay","perPage","Math","floor","perMove","gap","padding","right","_calculatePadding","width","reducedMotion","speed","rewindSpeed","splideSlider","Splide","mount","_updateSliderOptions","destroy","computedStyles","getComputedStyle","getPropertyValue","getBoundingClientRect","ceil","__decorateClass","property","Object","prototype","Number","Boolean","reflect","attribute","customElement"],"mappings":"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"}