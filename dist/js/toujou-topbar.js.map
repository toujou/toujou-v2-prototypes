{"version":3,"file":"toujou-topbar.js","sources":["../../src/components/toujou-topbar/toujou-topbar.ts"],"sourcesContent":["import { LitElement } from 'lit'\nimport { customElement, property } from 'lit/decorators.js'\n\n/**\n * Topbar element\n */\n@customElement('toujou-topbar')\nexport class ToujouTopbar extends LitElement {\n    // Constants\n    burgerButtonStateChangeEvent = 'toujou-burger-button-state-change';\n    mqlChangeEventName = 'toujou-topbar-breakpoint-change';\n    openNavBodyAttribute = 'nav-is-open';\n\n    @property({ type: Boolean, reflect: true, attribute: 'open-nav' })\n    _isOpen: boolean = false;\n\n    @property({ type: MediaQueryList })\n    _mql: MediaQueryList = window.matchMedia(\"(max-width: 839px)\");\n\n    @property({ type: Boolean, })\n    _isMobile: boolean = this._mql.matches;\n\n    protected createRenderRoot(): Element | ShadowRoot {\n        return this;\n    }\n\n    /**\n     * Add event listeners\n     */\n    connectedCallback() {\n        super.connectedCallback();\n\n        window.addEventListener(this.burgerButtonStateChangeEvent, this._handleBurgerButtonClick.bind(this));\n        this._mql.addEventListener('change', this._handleMqlChange.bind(this));\n    }\n\n    /**\n     * Remove event listeners\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n\n        window.removeEventListener(this.burgerButtonStateChangeEvent, this._handleBurgerButtonClick.bind(this));\n        this._mql.removeEventListener('change', this._handleMqlChange.bind(this));\n    }\n\n    /**\n     * Set correct isOpen value according to state of burger button click event\n     * Add / remove attribute from the body element, so we can prevent scroll in the background\n     * @param event\n     */\n    _handleBurgerButtonClick(event: Event) {\n        this._isOpen = (<CustomEvent>event).detail.state;\n        this._isOpen\n            ? document.body.setAttribute(this.openNavBodyAttribute, '')\n            : document.body.removeAttribute(this.openNavBodyAttribute);\n    }\n\n    /**\n     * When the window grows to desktop width:\n     *  - dispatch a \"media query change\" event that other elements (burger and navigation) can reacto to\n     *  - set the internal isOpen state to false\n     * @param event\n     */\n    _handleMqlChange(event: MediaQueryListEvent) {\n        const isMobile = event.matches;\n        this.dispatchEvent(new CustomEvent(this.mqlChangeEventName, {\n            bubbles: true,\n            composed: true,\n            detail: { state: isMobile }\n        }));\n\n        if (!isMobile) {\n            this._isOpen = false;\n        }\n    }\n}\n\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'toujou-topbar': ToujouTopbar\n    }\n}\n"],"names":["ToujouTopbar","LitElement","event","isMobile","__decorateClass","property","customElement"],"mappings":"wXAOa,IAAAA,EAAN,cAA2BC,CAAW,CAAtC,aAAA,CAAA,MAAA,GAAA,SAAA,EAE4B,KAAA,6BAAA,oCACV,KAAA,mBAAA,kCACE,KAAA,qBAAA,cAGJ,KAAA,QAAA,GAGI,KAAA,KAAA,OAAO,WAAW,oBAAoB,EAG7D,KAAA,UAAqB,KAAK,KAAK,OAAA,CAErB,kBAAyC,CACxC,OAAA,IACX,CAKA,mBAAoB,CAChB,MAAM,kBAAkB,EAExB,OAAO,iBAAiB,KAAK,6BAA8B,KAAK,yBAAyB,KAAK,IAAI,CAAC,EACnG,KAAK,KAAK,iBAAiB,SAAU,KAAK,iBAAiB,KAAK,IAAI,CAAC,CACzE,CAKA,sBAAuB,CACnB,MAAM,qBAAqB,EAE3B,OAAO,oBAAoB,KAAK,6BAA8B,KAAK,yBAAyB,KAAK,IAAI,CAAC,EACtG,KAAK,KAAK,oBAAoB,SAAU,KAAK,iBAAiB,KAAK,IAAI,CAAC,CAC5E,CAOA,yBAAyBC,EAAc,CAC9B,KAAA,QAAwBA,EAAO,OAAO,MAC3C,KAAK,QACC,SAAS,KAAK,aAAa,KAAK,qBAAsB,EAAE,EACxD,SAAS,KAAK,gBAAgB,KAAK,oBAAoB,CACjE,CAQA,iBAAiBA,EAA4B,CACzC,MAAMC,EAAWD,EAAM,QACvB,KAAK,cAAc,IAAI,YAAY,KAAK,mBAAoB,CACxD,QAAS,GACT,SAAU,GACV,OAAQ,CAAE,MAAOC,CAAS,CAC7B,CAAA,CAAC,EAEGA,IACD,KAAK,QAAU,GAEvB,CACJ,EA9DIC,EAAA,CADCC,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,UAAW,WAAY,CAAA,EANxDL,EAOT,UAAA,UAAA,CAAA,EAGAI,EAAA,CADCC,EAAS,CAAE,KAAM,eAAgB,CAAA,EATzBL,EAUT,UAAA,OAAA,CAAA,EAGAI,EAAA,CADCC,EAAS,CAAE,KAAM,QAAU,CAAA,EAZnBL,EAaT,UAAA,YAAA,CAAA,EAbSA,EAANI,EAAA,CADNE,EAAc,eAAe,CAAA,EACjBN,CAAA"}