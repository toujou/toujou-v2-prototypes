{"version":3,"file":"toujou-slider.js","sources":["../../src/components/toujou-slider/toujou-slider.ts"],"sourcesContent":["import { LitElement } from 'lit'\nimport { customElement, property, state } from 'lit/decorators.js'\n// @ts-ignore\nimport Splide from \"@splidejs/splide\";\n\n@customElement('toujou-slider')\nexport class ToujouSlider extends LitElement {\n\n    /**\n     * Reference to the node that where the slider will be initialized (\".splide\")\n     */\n    @property({ type: Object })\n    splideContainer: Element | null = null;\n\n    /**\n     * Show or hide the count at the bottom of the slider\n     */\n    @property({ type: Boolean, attribute: 'show-count' })\n    showCount: Boolean = false;\n\n    /**\n     * Toggle on / off the autoplay function\n     */\n    @property({ type: Boolean, attribute: 'auto-play' })\n    autoplay: Boolean = false;\n\n    /**\n     * Count element where we display the number of the current active slide\n     * @private\n     */\n    @property()\n    private _currentIndexCountElement: HTMLElement | null = null;\n\n    /**\n     * Count element where we should the total number of slider\n     * @private\n     */\n    @property()\n    private _totalSlidesCountElement: HTMLElement | null = null;\n\n    /**\n     * Total number of slides on the page, to be used on the count element\n     * @private\n     */\n    @state()\n    private _numberOfSlides: Number = 0;\n\n    /**\n     * Index of currently active slide, to be used on the count element\n     * @private\n     */\n    @state()\n    private _activeSlideIndex: Number = 1;\n\n    /**\n     * Reference to the Splice instance\n     * @private\n     */\n    @property()\n    private splideSlider: any;\n\n    /**\n     * Number of slides to show per \"page\"\n     * Docs: https://splidejs.com/guides/options/#perpage\n     */\n    @property({ reflect: true, attribute: 'slides-to-show' })\n    slidesToShow: number = 1;\n\n    /**\n     * Number of slider to advance per move\n     * Docs: https://splidejs.com/guides/options/#permove\n     */\n    @property({ reflect: true, attribute: 'slides-per-move' })\n    slidesPerMove: number = 1;\n\n    /**\n     * Type of slider. Valid values are \"loop\", \"slide\" and \"fade\"\n     * Docs: https://splidejs.com/guides/options/#type\n     */\n    @property({ reflect: true, attribute: 'slider-type' })\n    sliderType: 'loop' | 'slide' | 'fade' = 'loop';\n\n    /**\n     * Gap between the slides\n     * Docs: https://splidejs.com/guides/options/#gap\n     */\n    @property({ reflect: true, attribute: 'slider-gap' })\n    sliderGap: string = '0';\n\n    /**\n     * Duration between automatic moves when autoplay is active\n     * Docs: https://splidejs.com/guides/options/#interval\n     */\n    @property({ reflect: true, attribute: 'auto-play-interval' })\n    autoplayInterval: string = '6000';\n\n    /**\n     * Stringified JSON with object defining the breakpoints for the slider\n     * Docs: https://splidejs.com/guides/options/#breakpoints\n     */\n    @property({ reflect: true, attribute: 'slider-breakpoints' })\n    sliderBreakpoints: string | null = null;\n\n    /**\n     * Carousel padding\n     * https://splidejs.com/guides/options/#padding\n     */\n    @property({ reflect: true, attribute: 'slider-padding' })\n    sliderPadding: string = '0';\n\n    /**\n     * Center the active slide\n     * https://splidejs.com/guides/options/#focus\n     * https://splidejs.com/guides/options/#trimspace\n     */\n    @property({ reflect: true, attribute: 'slider-focus-center' })\n    sliderFocusCenter: string | boolean = false;\n\n    /**\n     * Define the aspect ratio of the images on the carousel\n     * https://splidejs.com/guides/options/#heightratio\n     */\n    @property({ reflect: true, attribute: 'slider-aspect-ratio' })\n    sliderAspectRatio: string = '0.5625';\n\n    /**\n     * Number of clones to be created on each side of the carousel\n     * Docs: https://splidejs.com/guides/options/#clones\n     */\n    @property({ reflect: true, attribute: 'slider-clones-amount' })\n    sliderClonesAmount: number | null = null;\n\n    @property({ attribute: 'arrow-prev-aria-label' })\n    arrowPrevAriaLabel: string = '';\n\n    @property({ attribute: 'arrow-next-aria-label' })\n    arrowNextAriaLabel: string = '';\n\n    @property({ attribute: 'arrow-first-aria-label' })\n    arrowFirstAriaLabel: string = '';\n\n    @property({ attribute: 'arrow-last-aria-label' })\n    arrowLastAriaLabel: string = '';\n\n    /**\n     * If 'min', the media query for breakpoints will be min-width, or otherwise max-width.\n     * Docs: https://splidejs.com/guides/options/#mediaquery\n     */\n    @property({ reflect: true, attribute: 'slider-media-query' })\n    sliderMediaQuery: 'min' | 'max' = 'max';\n\n    constructor() {\n        super();\n\n        this._handlePaginationUpdate = this._handlePaginationUpdate.bind(this);\n        this._handleSliderMount = this._handleSliderMount.bind(this);\n    }\n\n    /**\n     * Disable shadow root\n     */\n    createRenderRoot() {\n        return this;\n    }\n\n    firstUpdated() {\n        this.splideContainer = this.querySelector('.splide') || null;\n\n        if (!this.splideContainer) {\n            console.error(\"TOUJOU: Could not get necessary elements to initialize the slider\");\n            return;\n        } else {\n            this._initSlider();\n        }\n    }\n\n    /**\n     * Initialize the slider with the correct options\n     * Full list of options here: https://splidejs.com/guides/options/\n     */\n    private _initSlider() {\n        let sliderOptions = {\n            classes: {\n                pagination: 'splide__pagination slider-bullets',\n                page: 'splide__pagination__page slider-bullets__bullet',\n            },\n            type: this.sliderType,\n            autoplay: this.autoplay,\n            interval: this.autoplayInterval,\n            pauseOnHover: this.autoplay,\n            pauseOnFocus: this.autoplay,\n            perPage: parseInt(String(this.slidesToShow)),\n            perMove: this.slidesPerMove,\n            gap: this.sliderGap,\n            heightRatio: this.sliderAspectRatio,\n            mediaQuery: this.sliderMediaQuery,\n            reducedMotion: {\n                speed: 0,\n                rewindSpeed: 0,\n                autoplay: 'pause'\n            },\n            padding: this.sliderPadding,\n            i18n: {\n                prev: this.arrowPrevAriaLabel,\n                next: this.arrowNextAriaLabel,\n                first: this.arrowFirstAriaLabel,\n                last: this.arrowLastAriaLabel,\n            },\n            focusableNodes: '*',\n            breakpoints: undefined\n        }\n\n        if (this.sliderFocusCenter === 'true') {\n            // @ts-ignore\n            sliderOptions.focus = 'center';\n            // @ts-ignore\n            sliderOptions.trimSpace = false;\n        }\n\n        if (this.sliderBreakpoints) {\n            try {\n                sliderOptions.breakpoints = JSON.parse(this.sliderBreakpoints);\n            } catch (error) {\n                console.error('Error parsing slider breakpoints JSON:', error, '\\n', 'Received breakpoints JSON:', '\\n', this.sliderBreakpoints);\n            }\n        }\n\n        if (this.sliderClonesAmount) {\n            // @ts-ignore\n            sliderOptions.clones = this.sliderClonesAmount;\n        }\n\n        // @ts-ignore\n        this.splideSlider = new Splide(this.splideContainer, sliderOptions);\n\n        this.splideSlider!.on('mounted', this._handleSliderMount);\n        this.splideSlider!.on('moved', this._handlePaginationUpdate);\n\n        this.splideSlider!.mount();\n    }\n\n    /**\n     * Setup the count element when the element first mounts\n     */\n    private _handleSliderMount() {\n        this._getCountInfo();\n        this._initCount();\n        this._removeSlidesTabpanelRole();\n        this._addAriaLabelToSliderContainer();\n\n        this.dispatchEvent(new CustomEvent('toujou-slider-mounted', {\n            bubbles: true,\n            composed: true,\n            detail: {\n                el: this.splideSlider\n            }\n        }));\n    }\n\n    /**\n     * Remove the \"tabpanel\" role from slides to fix accessibility error\n     * @private\n     */\n    private _removeSlidesTabpanelRole() {\n        const elsWithPanelTabRole = this.splideSlider.root.querySelectorAll('*[role=\"tabpanel\"]');\n        if (!elsWithPanelTabRole) return;\n\n        elsWithPanelTabRole.forEach((el: HTMLElement) => {\n            el.removeAttribute('role');\n            el.removeAttribute('aria-label');\n        });\n    }\n\n    /**\n     * Add an aria-label attribute to the slider container element to fix a11y error\n     * @private\n     */\n    private _addAriaLabelToSliderContainer() {\n        const containerId = this.splideContainer?.id;\n        this.splideContainer?.setAttribute('aria-label', `Slider - ${containerId}`)\n    }\n\n    /**\n     * Get the DOM elements that are used to display the count information\n     */\n    private _getCountInfo() {\n        this._currentIndexCountElement = this.querySelector('.slider-count__current');\n        this._totalSlidesCountElement = this.querySelector('.slider-count__total');\n    }\n\n    /**\n     * Initialize the count element and update count elements in the DOM\n     */\n    private _initCount() {\n        this._numberOfSlides = this.splideSlider.Components.Elements.slides.length;\n        this._updateSliderCount();\n    }\n\n    /**\n     * Trigger a count update whenever the pagination updates\n     * @param event\n     */\n    private _handlePaginationUpdate(event: number) {\n        this._activeSlideIndex = event + 1;\n        this._updateSliderCount();\n\n        this.dispatchEvent(new CustomEvent('toujou-slider-moved', {\n            bubbles: true,\n            composed: true,\n            detail: {\n                el: this.splideSlider,\n                activeIndex: this._activeSlideIndex\n            }\n        }));\n    }\n\n    /**\n     * Update the count elements with the correct content\n     */\n    private _updateSliderCount() {\n        if (this._currentIndexCountElement) {\n            this._currentIndexCountElement.textContent = String(this._activeSlideIndex);\n        }\n\n        if (this._totalSlidesCountElement) {\n            this._totalSlidesCountElement.textContent = String(this._numberOfSlides);\n        }\n    }\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'toujou-slider': ToujouSlider\n    }\n}\n"],"names":["ToujouSlider","LitElement","constructor","super","this","splideContainer","showCount","autoplay","_currentIndexCountElement","_totalSlidesCountElement","_numberOfSlides","_activeSlideIndex","slidesToShow","slidesPerMove","sliderType","sliderGap","autoplayInterval","sliderBreakpoints","sliderPadding","sliderFocusCenter","sliderAspectRatio","sliderClonesAmount","arrowPrevAriaLabel","arrowNextAriaLabel","arrowFirstAriaLabel","arrowLastAriaLabel","sliderMediaQuery","_handlePaginationUpdate","bind","_handleSliderMount","createRenderRoot","firstUpdated","querySelector","_initSlider","console","error","sliderOptions","classes","pagination","page","type","interval","pauseOnHover","pauseOnFocus","perPage","parseInt","String","perMove","gap","heightRatio","mediaQuery","reducedMotion","speed","rewindSpeed","padding","i18n","prev","next","first","last","focusableNodes","breakpoints","focus","trimSpace","JSON","parse","clones","splideSlider","Splide","on","mount","_getCountInfo","_initCount","_removeSlidesTabpanelRole","_addAriaLabelToSliderContainer","dispatchEvent","CustomEvent","bubbles","composed","detail","el","elsWithPanelTabRole","root","querySelectorAll","forEach","removeAttribute","containerId","_a","id","_b","setAttribute","Components","Elements","slides","length","_updateSliderCount","event","activeIndex","textContent","__decorateClass","property","Object","prototype","Boolean","attribute","state","reflect","customElement"],"mappings":"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"}