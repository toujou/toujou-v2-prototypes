{"version":3,"file":"toujou-sliding-nav.js","sources":["../../src/components/toujou-sliding-nav/toujou-sliding-nav.ts"],"sourcesContent":["/**\n * Wrapper class for the toujou sliding navigation.\n * On mobile there is only one navigation level visible at a time.\n * When we are on a sub-navigation there is also a \"back button\" and a \"subtitle\"\n */\nexport class ToujouSlidingNav extends HTMLElement {\n\n    // Constants\n    navAttributes = {\n        navOpenLevel: 'open-level',\n        liOpenItem: 'is-open'\n    }\n    startingActiveLevel: number = 1;\n    maximalLevel: number = 3;\n    topbarMqlChangeEventName = 'toujou-topbar-breakpoint-change';\n    burgerButtonClickEvent = 'toujou-burger-button-click';\n\n    // Variables\n    _backButtonEl: HTMLButtonElement | null = null;\n    _mainNavEl: HTMLUListElement | null = null;\n    _subtitleEl: HTMLParagraphElement | null = null;\n    _subtitleText: string = '';\n    _activeLevel: number | null = null;\n    _chevrons: HTMLSpanElement[] = [];\n\n\n    // @ts-ignore\n    set activeLevel(value) {\n        this._activeLevel = value;\n        this._updateUI();\n    }\n\n    // @ts-ignore\n    get activeLevel() {\n        return this._activeLevel;\n    }\n\n    /**\n     * Initialize and add event listeners\n     */\n    connectedCallback() {\n        this._getElements();\n        this.activeLevel = this.startingActiveLevel;\n\n        this._backButtonEl?.addEventListener('click', this._handleBackButtonClick.bind(this));\n        this._chevrons.forEach((chevron) => {\n            chevron.addEventListener('click', this._handleChevronClick.bind(this))\n        });\n        window.addEventListener(this.topbarMqlChangeEventName, this._handleMqlChange.bind(this));\n        window.addEventListener(this.burgerButtonClickEvent, this._handleBurgerButtonClick.bind(this));\n    }\n\n    /**\n     * remove event listeners when the element disconnects\n     */\n    disconnectedCallback() {\n        this._backButtonEl?.removeEventListener('click', this._handleBackButtonClick.bind(this));\n        this._chevrons.forEach((chevron) => {\n            chevron.removeEventListener('click', this._handleChevronClick.bind(this))\n        });\n        window.removeEventListener(this.topbarMqlChangeEventName, this._handleMqlChange.bind(this));\n        window.removeEventListener(this.burgerButtonClickEvent, this._handleBurgerButtonClick.bind(this));\n    }\n\n    /**\n     * Get all necessary elements\n     */\n    _getElements() {\n        this._backButtonEl = this.querySelector('.main-nav__back-button');\n        this._mainNavEl = this.querySelector('.main-nav__list');\n        this._subtitleEl = this.querySelector('.main-nav__subtitle');\n        this._chevrons = Array.from(this.querySelectorAll('.main-nav__chevron'));\n    }\n\n    /**\n     * update the subtitle text and set correct open level attribute to the navigation element\n     */\n    _updateUI() {\n        if (!this.activeLevel) return;\n\n        this._subtitleEl!.textContent = this._subtitleText;\n        this.setAttribute(this.navAttributes.navOpenLevel, String(this.activeLevel));\n    }\n\n    /**\n     * When the back button is clicked:\n     *  - set correct activeLevel\n     *  - remove the open item attribute from relevant list items\n     */\n    _handleBackButtonClick() {\n        if (this.activeLevel! > 1) {\n            this.activeLevel = this.activeLevel! - 1;\n\n            // Remove 'is-open' navAttributes from relevant list items\n            const allOpenListItems = this.querySelectorAll('.main-nav__list-item[is-open]');\n            if (!allOpenListItems.length) return;\n            allOpenListItems.forEach((item) => {\n                const itemLevel = parseInt(item.getAttribute('nav-item-level')!);\n                if (itemLevel >= this.activeLevel!) {\n                    item.removeAttribute(this.navAttributes.liOpenItem);\n                }\n            });\n        }\n    }\n\n    /**\n     * When a chevron is clicked:\n     *  - Add correct open attribute to the parent list item\n     *  - Add correct title to the subtitle element\n     * @param event\n     */\n    _handleChevronClick(event: Event) {\n        const eventTarget = event.target as HTMLSpanElement;\n        const parentItem = eventTarget.closest('.main-nav__list-item') as HTMLLIElement;\n        parentItem.setAttribute(this.navAttributes.liOpenItem, '');\n\n        const parentText = parentItem.querySelector('.main-nav__link > .main-nav__text')?.textContent || null;\n        this._subtitleText = parentText || '';\n        if (this.activeLevel! < this.maximalLevel) {\n            this.activeLevel = this.activeLevel! + 1;\n        }\n    }\n\n    /**\n     * Reset the state if window has grown to desktop width\n     * @param event\n     */\n    _handleMqlChange(event: Event) {\n        if (!(<CustomEvent>event).detail.state) {\n            this._stateReset()\n        }\n    }\n\n    /**\n     * Reset state if the burger button has been closed\n     * @param event\n     */\n    _handleBurgerButtonClick(event: Event) {\n        if (!(<CustomEvent>event).detail.state) {\n            this._stateReset();\n        }\n    }\n\n    /**\n     * Reset the state\n     *  - reset the activeLevel\n     *  - remove open navAttributes from all relevant items\n     */\n    _stateReset() {\n        this.activeLevel = this.startingActiveLevel;\n        const allOpenListItems = this.querySelectorAll('.main-nav__list-item[is-open]');\n        if (!allOpenListItems.length) return;\n        allOpenListItems.forEach((item) => {\n            item.removeAttribute(this.navAttributes.liOpenItem);\n        });\n    }\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'toujou-sliding-nav': ToujouSlidingNav\n    }\n}\n\ncustomElements.define('toujou-sliding-nav', ToujouSlidingNav, { extends: 'nav' });\n"],"names":["ToujouSlidingNav","value","_a","chevron","allOpenListItems","item","event","parentItem","parentText"],"mappings":"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"}