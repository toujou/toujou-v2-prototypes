{"version":3,"file":"main-nav.js","sources":["../../src/js/elements/main-nav.ts"],"sourcesContent":["export class MainNav {\n    private mainNavEl: MainNavElement;\n    private navListItems: MainNavListItem[] = [];\n    private activeSubNavs: MainNavListItem[] = [];\n\n    protected readonly listItemSelector = '.main-nav__list-item';\n    protected readonly hasSubNavAttribute = 'data-has-subnav';\n    protected readonly isOpenAttribute = 'data-is-open';\n    protected readonly listItemLevelAttribute = 'data-nav-item-level';\n    protected readonly listItemChevronSelector = '.main-nav__chevron';\n    protected readonly listSelector = '.main-nav__list';\n    protected readonly isOpenOnHoverAttribute = 'data-is-open-on-hover';\n\n    constructor(mainNavEl: MainNavElement) {\n        this.mainNavEl = mainNavEl;\n        this._getNavListItems();\n\n        if (this.mainNavEl.hasAttribute(this.isOpenOnHoverAttribute)) {\n            this.navListItems.forEach(navListItem => {\n                if(navListItem.hasSubNav) {\n                    navListItem.addEventListener('mouseenter', this._handleMouseEvent);\n                    navListItem.addEventListener('mouseleave', this._handleMouseEvent);\n                }\n            });\n        }\n\n        // @ts-ignore\n        window.addEventListener('keyup', this._handleKeyUp);\n    }\n\n    /**\n     * Get list of all the main navigation list items and start listening for click events\n     */\n    _getNavListItems = () => {\n        this.navListItems = [...this.mainNavEl.querySelectorAll(this.listItemSelector)] as MainNavListItem[];\n\n        if (!this.navListItems) {\n            console.warn(\"TOUJOU: Main navigation has no list items!\");\n            return;\n        }\n\n        this.navListItems.forEach((listItem: MainNavListItem) => {\n            listItem.hasSubNav = listItem.hasAttribute(this.hasSubNavAttribute);\n            if (!listItem.hasSubNav) return;\n\n            listItem.isOpen = false;\n            listItem.level = listItem.getAttribute(this.listItemLevelAttribute);\n            listItem.toggleEl = listItem.querySelector('.main-nav__chevron') as HTMLElement;\n            listItem.toggleEl.addEventListener('click', () => {\n                this._toggleListItemState(listItem);\n            })\n            listItem.addEventListener('keyup', this._handleKeyUp);\n        })\n    }\n\n    /**\n     * Handle mouse events\n     * - Mouseenter/Mouseleave: Toggle subnav of current MainNavListItem\n     * @param event\n     */\n    _handleMouseEvent = (event: MouseEvent) => {\n        if(event.type === 'mouseenter' || event.type === 'mouseleave') {\n            this._toggleListItemState(event.currentTarget as MainNavListItem);\n        }\n    }\n\n    /**\n     * Handle keyup events\n     * - Escape: Close parent or whole navigation\n     * @param   event\n     */\n    _handleKeyUp = (event: KeyboardEvent) => {\n        if (event.key === 'Escape' || event.code === 'Escape') {\n            const listItem = this.activeSubNavs.shift();\n\n            event.stopPropagation();\n\n            if(!listItem) {\n                this.mainNavEl.dispatchEvent(new CustomEvent('toujou-main-nav-close'));\n            } else {\n                this._toggleListItemState(listItem!);\n\n                listItem.parentElement?.querySelector(\n                    `${this.listItemChevronSelector}[aria-controls=\"${listItem.querySelector(this.listSelector)?.id}\"]`\n                /* @ts-ignore */\n                )?.focus({ focusVisible: true });\n            }\n        }\n    }\n\n    /**\n     * Toggle the list item isOpen state and add / remove the isOpenAttribute accordingly\n     * Set the chevron element's aria-expanded attribute according to list item isOpen state\n     * @param   listItem\n     */\n    _toggleListItemState = (listItem: MainNavListItem) => {\n        const listItemChevron = listItem.querySelector(this.listItemChevronSelector);\n\n        listItem.isOpen = !listItem.isOpen;\n\n        listItemChevron?.setAttribute('aria-expanded', `${listItem.isOpen}`);\n        listItemChevron?.setAttribute('aria-pressed', `${listItem.isOpen}`);\n\n        if (listItem.isOpen) {\n            listItem.setAttribute(this.isOpenAttribute, '')\n            this._closeOtherOpenListItems(listItem);\n            this.activeSubNavs.unshift(listItem);\n            window.addEventListener('click', this._onWindowClick);\n        } else {\n            listItem.removeAttribute(this.isOpenAttribute);\n        }\n    }\n\n    /**\n     * Close other open list items so there aren't multiple lists open at the same time\n     * (only sibling or child lists will be closed)\n     * @param   listItem\n     */\n    _closeOtherOpenListItems = (listItem: MainNavListItem) => {\n        const openSiblings: NodeListOf<MainNavListItem> | undefined = listItem.parentNode?.querySelectorAll(`${this.listItemSelector}[${this.isOpenAttribute}]`);\n        if (!openSiblings) return;\n\n        openSiblings.forEach((sibling) => {\n            if (sibling.isOpen && sibling !== listItem) {\n                this._toggleListItemState(sibling);\n            }\n        })\n    }\n\n    /**\n     * Close all open navigation items\n     */\n    _closeAllNavListItems = () => {\n        this.navListItems.forEach((listItem) => {\n            if (listItem.isOpen) {\n                this._toggleListItemState(listItem);\n                window.removeEventListener('click', this._onWindowClick);\n            }\n        })\n    }\n\n    /**\n     * Close the main nav on click outside\n     * @param   event\n     */\n    _onWindowClick = (event: MouseEvent)=> {\n        const clickedEl = event.target as HTMLElement;\n        if (!clickedEl.closest('.main-nav')) {\n            this._closeAllNavListItems();\n        }\n    }\n}\n\nexport function initMainNav() {\n    const mainNavEl = document.querySelector('.main-nav') as MainNavElement;\n    if (!mainNavEl || mainNavEl.mainNav) return;\n\n    mainNavEl.mainNav = new MainNav(mainNavEl);\n}\n\ndeclare global {\n    interface MainNavListItem extends HTMLElement {\n        hasSubNav: boolean,\n        isOpen: boolean,\n        level: string | null,\n        toggleEl: HTMLElement\n    }\n\n    interface MainNavElement extends HTMLElement {\n        mainNav: MainNav,\n    }\n}\n"],"names":["MainNav","constructor","mainNavEl","this","navListItems","activeSubNavs","listItemSelector","hasSubNavAttribute","isOpenAttribute","listItemLevelAttribute","listItemChevronSelector","listSelector","isOpenOnHoverAttribute","_getNavListItems","querySelectorAll","forEach","listItem","hasSubNav","hasAttribute","isOpen","level","getAttribute","toggleEl","querySelector","addEventListener","_toggleListItemState","_handleKeyUp","console","warn","_handleMouseEvent","event","type","currentTarget","_a","_b","_c","key","code","shift","stopPropagation","parentElement","id","focus","focusVisible","dispatchEvent","CustomEvent","listItemChevron","setAttribute","_closeOtherOpenListItems","unshift","window","_onWindowClick","removeAttribute","openSiblings","parentNode","sibling","_closeAllNavListItems","removeEventListener","target","closest","navListItem","initMainNav","document","mainNav"],"mappings":"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"}