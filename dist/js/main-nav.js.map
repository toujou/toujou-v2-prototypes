{"version":3,"file":"main-nav.js","sources":["../../src/js/elements/main-nav.ts"],"sourcesContent":["export class MainNav {\n    private mainNavEl: MainNavElement;\n    private navListItems: MainNavListItem[] = [];\n    private activeSubNavs: MainNavListItem[] = [];\n\n    protected readonly listItemSelector = '.main-nav__list-item';\n    protected readonly hasSubNavAttribute = 'has-subnav';\n    protected readonly isOpenAttribute = 'is-open';\n    protected readonly listItemLevelAttribute = 'nav-item-level';\n    protected readonly listItemChevronSelector = '.main-nav__chevron';\n    protected readonly listSelector = '.main-nav__list';\n\n    constructor(mainNavEl: MainNavElement) {\n        this.mainNavEl = mainNavEl;\n        this._getNavListItems();\n\n        // @ts-ignore\n        window.addEventListener('keyup', this._handleKeyUp);\n    }\n\n    /**\n     * Get list of all the main navigation list items and start listening for click events\n     */\n    _getNavListItems = () => {\n        this.navListItems = [...this.mainNavEl.querySelectorAll(this.listItemSelector)] as MainNavListItem[];\n\n        if (!this.navListItems) {\n            console.warn(\"TOUJOU: Main navigation has no list items!\");\n            return;\n        }\n\n        this.navListItems.forEach((listItem: MainNavListItem) => {\n            listItem.hasSubNav = listItem.hasAttribute(this.hasSubNavAttribute);\n            if (!listItem.hasSubNav) return;\n\n            listItem.isOpen = false;\n            listItem.level = listItem.getAttribute(this.listItemLevelAttribute);\n            listItem.toggleEl = listItem.querySelector('.main-nav__chevron') as HTMLElement;\n            listItem.toggleEl.addEventListener('click', () => {\n                this._toggleListItemState(listItem);\n            })\n            listItem.addEventListener('keyup', this._handleKeyUp);\n        })\n    }\n\n    /**\n     * Handle keyup events\n     * - Escape: Close parent or whole navigation\n     * @param   event\n     */\n    _handleKeyUp = (event: KeyboardEvent) => {\n        if (event.key === 'Escape' || event.code === 'Escape') {\n            const listItem = this.activeSubNavs.shift();\n\n            event.stopPropagation();\n\n            if(!listItem) {\n                this.mainNavEl.dispatchEvent(new CustomEvent('toujou-main-nav-close'));\n            } else {\n                this._toggleListItemState(listItem!);\n\n                listItem.parentElement?.querySelector(\n                    `${this.listItemChevronSelector}[aria-controls=\"${listItem.querySelector(this.listSelector)?.id}\"]`\n                /* @ts-ignore */\n                )?.focus({ focusVisible: true });\n            }\n        }\n    }\n\n    /**\n     * Toggle the list item isOpen state and add / remove the isOpenAttribute accordingly\n     * Set the chevron element's aria-expanded attribute according to list item isOpen state\n     * @param   listItem\n     */\n    _toggleListItemState = (listItem: MainNavListItem) => {\n        const listItemChevron = listItem.querySelector(this.listItemChevronSelector);\n\n        listItem.isOpen = !listItem.isOpen;\n\n        listItemChevron?.setAttribute('aria-expanded', `${listItem.isOpen}`);\n        listItemChevron?.setAttribute('aria-pressed', `${listItem.isOpen}`);\n\n        if (listItem.isOpen) {\n            listItem.setAttribute(this.isOpenAttribute, '')\n            this._closeOtherOpenListItems(listItem);\n            this.activeSubNavs.unshift(listItem);\n            window.addEventListener('click', this._onWindowClick);\n        } else {\n            listItem.removeAttribute(this.isOpenAttribute);\n        }\n    }\n\n    /**\n     * Close other open list items so there aren't multiple lists open at the same time\n     * (only sibling or child lists will be closed)\n     * @param   listItem\n     */\n    _closeOtherOpenListItems = (listItem: MainNavListItem) => {\n        const openSiblings: NodeListOf<MainNavListItem> | undefined = listItem.parentNode?.querySelectorAll(`${this.listItemSelector}[is-open]`);\n        if (!openSiblings) return;\n\n        openSiblings.forEach((sibling) => {\n            if (sibling.isOpen && sibling !== listItem) {\n                this._toggleListItemState(sibling);\n            }\n        })\n    }\n\n    /**\n     * Close all open navigation items\n     */\n    _closeAllNavListItems = () => {\n        this.navListItems.forEach((listItem) => {\n            if (listItem.isOpen) {\n                this._toggleListItemState(listItem);\n                window.removeEventListener('click', this._onWindowClick);\n            }\n        })\n    }\n\n    /**\n     * Close the main nav on click outside\n     * @param   event\n     */\n    _onWindowClick = (event: MouseEvent)=> {\n        const clickedEl = event.target as HTMLElement;\n        if (!clickedEl.closest('.main-nav')) {\n            this._closeAllNavListItems();\n        }\n    }\n}\n\nexport function initMainNav() {\n    const mainNavEl = document.querySelector('.main-nav') as MainNavElement;\n    if (!mainNavEl || mainNavEl.mainNav) return;\n\n    mainNavEl.mainNav = new MainNav(mainNavEl);\n}\n\ndeclare global {\n    interface MainNavListItem extends HTMLElement {\n        hasSubNav: boolean,\n        isOpen: boolean,\n        level: string | null,\n        toggleEl: HTMLElement\n    }\n\n    interface MainNavElement extends HTMLElement {\n        mainNav: MainNav,\n    }\n}\n"],"names":["MainNav","constructor","mainNavEl","this","navListItems","activeSubNavs","listItemSelector","hasSubNavAttribute","isOpenAttribute","listItemLevelAttribute","listItemChevronSelector","listSelector","_getNavListItems","querySelectorAll","forEach","listItem","hasSubNav","hasAttribute","isOpen","level","getAttribute","toggleEl","querySelector","addEventListener","_toggleListItemState","_handleKeyUp","console","warn","event","_a","_b","_c","key","code","shift","stopPropagation","parentElement","id","focus","focusVisible","dispatchEvent","CustomEvent","listItemChevron","setAttribute","_closeOtherOpenListItems","unshift","window","_onWindowClick","removeAttribute","openSiblings","parentNode","sibling","_closeAllNavListItems","removeEventListener","target","closest","initMainNav","document","mainNav"],"mappings":"AAAO,MAAMA,EAYT,WAAAC,CAAYC,GAVZC,KAAQC,aAAkC,GAC1CD,KAAQE,cAAmC,GAE3CF,KAAmBG,iBAAmB,uBACtCH,KAAmBI,mBAAqB,aACxCJ,KAAmBK,gBAAkB,UACrCL,KAAmBM,uBAAyB,iBAC5CN,KAAmBO,wBAA0B,qBAC7CP,KAAmBQ,aAAe,kBAalCR,KAAAS,iBAAmB,KACVT,KAAAC,aAAe,IAAID,KAAKD,UAAUW,iBAAiBV,KAAKG,mBAExDH,KAAKC,aAKLD,KAAAC,aAAaU,SAASC,IACvBA,EAASC,UAAYD,EAASE,aAAad,KAAKI,oBAC3CQ,EAASC,YAEdD,EAASG,QAAS,EAClBH,EAASI,MAAQJ,EAASK,aAAajB,KAAKM,wBACnCM,EAAAM,SAAWN,EAASO,cAAc,sBAClCP,EAAAM,SAASE,iBAAiB,SAAS,KACxCpB,KAAKqB,qBAAqBT,EAAQ,IAE7BA,EAAAQ,iBAAiB,QAASpB,KAAKsB,cAAY,IAdpDC,QAAQC,KAAK,6CAehB,EAQLxB,KAAAsB,aAAgBG,IAlDb,IAAAC,EAAAC,EAAAC,EAmDC,GAAkB,WAAdH,EAAMI,KAAmC,WAAfJ,EAAMK,KAAmB,CAC7C,MAAAlB,EAAWZ,KAAKE,cAAc6B,QAEpCN,EAAMO,kBAEFpB,GAGAZ,KAAKqB,qBAAqBT,GAE1B,OAAAgB,EAAA,OAAAD,EAAAf,EAASqB,oBAAe,EAAAN,EAAAR,cACpB,GAAGnB,KAAKO,0CAA0C,OAAAmB,EAAAd,EAASO,cAAcnB,KAAKQ,oBAA5B,EAAAkB,EAA2CQ,UAE9FN,EAAAO,MAAM,CAAEC,cAAc,KAPzBpC,KAAKD,UAAUsC,cAAc,IAAIC,YAAY,yBASrD,GAQJtC,KAAAqB,qBAAwBT,IACpB,MAAM2B,EAAkB3B,EAASO,cAAcnB,KAAKO,yBAE3CK,EAAAG,QAAUH,EAASG,OAE5B,MAAAwB,GAAAA,EAAiBC,aAAa,gBAAiB,GAAG5B,EAASG,UAC3D,MAAAwB,GAAAA,EAAiBC,aAAa,eAAgB,GAAG5B,EAASG,UAEtDH,EAASG,QACAH,EAAA4B,aAAaxC,KAAKK,gBAAiB,IAC5CL,KAAKyC,yBAAyB7B,GACzBZ,KAAAE,cAAcwC,QAAQ9B,GACpB+B,OAAAvB,iBAAiB,QAASpB,KAAK4C,iBAE7BhC,EAAAiC,gBAAgB7C,KAAKK,gBAClC,EAQJL,KAAAyC,yBAA4B7B,IAjGzB,IAAAc,EAkGC,MAAMoB,EAAwD,OAAApB,EAASd,EAAAmC,qBAAYrC,iBAAiB,GAAGV,KAAKG,6BACvG2C,GAEQA,EAAAnC,SAASqC,IACdA,EAAQjC,QAAUiC,IAAYpC,GAC9BZ,KAAKqB,qBAAqB2B,EAC9B,GACH,EAMLhD,KAAAiD,sBAAwB,KACfjD,KAAAC,aAAaU,SAASC,IACnBA,EAASG,SACTf,KAAKqB,qBAAqBT,GACnB+B,OAAAO,oBAAoB,QAASlD,KAAK4C,gBAC7C,GACH,EAOL5C,KAAA4C,eAAkBnB,IACIA,EAAM0B,OACTC,QAAQ,cACnBpD,KAAKiD,uBACT,EAnHAjD,KAAKD,UAAYA,EACjBC,KAAKS,mBAGEkC,OAAAvB,iBAAiB,QAASpB,KAAKsB,aAC1C,EAkHG,SAAS+B,IACN,MAAAtD,EAAYuD,SAASnC,cAAc,aACpCpB,IAAaA,EAAUwD,UAElBxD,EAAAwD,QAAU,IAAI1D,EAAQE,GACpC"}