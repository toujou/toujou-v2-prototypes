{"version":3,"file":"main-nav.js","sources":["../../src/js/elements/main-nav.ts"],"sourcesContent":["export class MainNav {\n    private mainNavEl: MainNavElement;\n    private navListItems: MainNavListItem[] = [];\n\n    protected readonly listItemSelector = '.main-nav__list-item';\n    protected readonly hasSubNavAttribute = 'has-subnav';\n    protected readonly isOpenAttribute = 'is-open';\n    protected readonly listItemLevelAttribute = 'nav-item-level';\n    protected readonly listItemChevronSelector = 'main-nav__chevron';\n\n    constructor(mainNavEl: MainNavElement) {\n        this.mainNavEl = mainNavEl;\n        this._getNavListItems();\n\n        // @ts-ignore\n        window.addEventListener('keyup', this._handleKeyUp);\n    }\n\n    /**\n     * Get list of all the main navigation list items and start listening for click events\n     */\n    _getNavListItems = () => {\n        this.navListItems = [...this.mainNavEl.querySelectorAll(this.listItemSelector)] as MainNavListItem[];\n\n        if (!this.navListItems) {\n            console.warn(\"TOUJOU: Main navigation has no list items!\");\n            return;\n        }\n\n        this.navListItems.forEach((listItem: MainNavListItem) => {\n            listItem.hasSubNav = listItem.hasAttribute(this.hasSubNavAttribute);\n            if (!listItem.hasSubNav) return;\n\n            listItem.isOpen = false;\n            listItem.level = listItem.getAttribute(this.listItemLevelAttribute);\n            listItem.toggleEl = listItem.querySelector('.main-nav__chevron') as HTMLElement;\n            listItem.toggleEl.addEventListener('click', () => {\n                this._toggleListItemState(listItem);\n            })\n            listItem.addEventListener('keyup', (event: KeyboardEvent) => {\n                // @ts-ignore\n                this._handleKeyUp(event, event.target);\n            });\n        })\n    }\n\n    /**\n     * - On Enter or Space click on a main nav chevron we toggle the nav item open / closed\n     * - On Esc press close the open main navigation\n     * @param   event\n     * @param   listItem\n     */\n    _handleKeyUp = (event: KeyboardEvent, listItem: MainNavListItem) => {\n        // Open list item when there is \"enter\" or \"space\" press on the item chevron\n        if (event.key === 'Enter' || event.code === 'Enter' || event.code === 'Space' || event.key === ' ') {\n            if (listItem && listItem.classList.contains(this.listItemChevronSelector)) {\n                const parentListItem = listItem.closest(this.listItemSelector) as MainNavListItem;\n                this._toggleListItemState(parentListItem);\n            }\n        }\n\n        // Close all nav items when \"Escape\" is pressed\n        if (event.key === 'Escape' || event.code === 'Escape') {\n            this._closeAllNavListItems();\n        }\n    }\n\n    /**\n     * Toggle the list item isOpen state and add / remove the isOpenAttribute accordingly\n     * @param   listItem\n     */\n    _toggleListItemState = (listItem: MainNavListItem) => {\n        listItem.isOpen = !listItem.isOpen;\n\n        if (listItem.isOpen) {\n            listItem.setAttribute(this.isOpenAttribute, '')\n            this._closeOtherOpenListItems(listItem);\n            window.addEventListener('click', this._onWindowClick);\n        } else {\n            listItem.removeAttribute(this.isOpenAttribute);\n        }\n    }\n\n    /**\n     * Close other open list items so there aren't multiple lists open at the same time\n     * (only sibling or child lists will be closed)\n     * @param   listItem\n     */\n    _closeOtherOpenListItems = (listItem: MainNavListItem) => {\n        const openSiblings: NodeListOf<MainNavListItem> | undefined = listItem.parentNode?.querySelectorAll(`${this.listItemSelector}[is-open]`);\n        if (!openSiblings) return;\n\n        openSiblings.forEach((sibling) => {\n            if (sibling.isOpen && sibling !== listItem) {\n                this._toggleListItemState(sibling);\n            }\n        })\n    }\n\n    /**\n     * Close all open navigation items\n     */\n    _closeAllNavListItems = () => {\n        this.navListItems.forEach((listItem) => {\n            if (listItem.isOpen) {\n                this._toggleListItemState(listItem);\n                window.removeEventListener('click', this._onWindowClick);\n            }\n        })\n    }\n\n    /**\n     * Close the main nav on click outside\n     * @param   event\n     */\n    _onWindowClick = (event: MouseEvent)=> {\n        const clickedEl = event.target as HTMLElement;\n        if (!clickedEl.closest('.main-nav')) {\n            this._closeAllNavListItems();\n        }\n    }\n}\n\nexport function initMainNav() {\n    const mainNavEl = document.querySelector('.main-nav') as MainNavElement;\n    if (!mainNavEl || mainNavEl.mainNav) return;\n\n    mainNavEl.mainNav = new MainNav(mainNavEl);\n}\n\ndeclare global {\n    interface MainNavListItem extends HTMLElement {\n        hasSubNav: boolean,\n        isOpen: boolean,\n        level: string | null,\n        toggleEl: HTMLElement\n    }\n\n    interface MainNavElement extends HTMLElement {\n        mainNav: MainNav,\n    }\n}\n"],"names":["MainNav","constructor","mainNavEl","this","navListItems","listItemSelector","hasSubNavAttribute","isOpenAttribute","listItemLevelAttribute","listItemChevronSelector","_getNavListItems","querySelectorAll","forEach","listItem","hasSubNav","hasAttribute","isOpen","level","getAttribute","toggleEl","querySelector","addEventListener","_toggleListItemState","event","_handleKeyUp","target","console","warn","key","code","classList","contains","parentListItem","closest","_closeAllNavListItems","setAttribute","_closeOtherOpenListItems","window","_onWindowClick","removeAttribute","_a","openSiblings","parentNode","sibling","removeEventListener","initMainNav","document","mainNav"],"mappings":"AAAO,MAAMA,EAUT,WAAAC,CAAYC,GARZC,KAAQC,aAAkC,GAE1CD,KAAmBE,iBAAmB,uBACtCF,KAAmBG,mBAAqB,aACxCH,KAAmBI,gBAAkB,UACrCJ,KAAmBK,uBAAyB,iBAC5CL,KAAmBM,wBAA0B,oBAa7CN,KAAAO,iBAAmB,KACVP,KAAAC,aAAe,IAAID,KAAKD,UAAUS,iBAAiBR,KAAKE,mBAExDF,KAAKC,aAKLD,KAAAC,aAAaQ,SAASC,IACvBA,EAASC,UAAYD,EAASE,aAAaZ,KAAKG,oBAC3CO,EAASC,YAEdD,EAASG,QAAS,EAClBH,EAASI,MAAQJ,EAASK,aAAaf,KAAKK,wBACnCK,EAAAM,SAAWN,EAASO,cAAc,sBAClCP,EAAAM,SAASE,iBAAiB,SAAS,KACxClB,KAAKmB,qBAAqBT,EAAQ,IAE7BA,EAAAQ,iBAAiB,SAAUE,IAE3BpB,KAAAqB,aAAaD,EAAOA,EAAME,OAAM,IACxC,IAjBDC,QAAQC,KAAK,6CAkBhB,EASUxB,KAAAqB,aAAA,CAACD,EAAsBV,KAE9B,IAAc,UAAdU,EAAMK,KAAkC,UAAfL,EAAMM,MAAmC,UAAfN,EAAMM,MAAkC,MAAdN,EAAMK,MAC/Ef,GAAYA,EAASiB,UAAUC,SAAS5B,KAAKM,yBAA0B,CACvE,MAAMuB,EAAiBnB,EAASoB,QAAQ9B,KAAKE,kBAC7CF,KAAKmB,qBAAqBU,EAC9B,CAIc,WAAdT,EAAMK,KAAmC,WAAfL,EAAMM,MAChC1B,KAAK+B,uBACT,EAOJ/B,KAAAmB,qBAAwBT,IACXA,EAAAG,QAAUH,EAASG,OAExBH,EAASG,QACAH,EAAAsB,aAAahC,KAAKI,gBAAiB,IAC5CJ,KAAKiC,yBAAyBvB,GACvBwB,OAAAhB,iBAAiB,QAASlB,KAAKmC,iBAE7BzB,EAAA0B,gBAAgBpC,KAAKI,gBAClC,EAQJJ,KAAAiC,yBAA4BvB,IAxFzB,IAAA2B,EAyFC,MAAMC,EAAwD,OAAAD,EAAS3B,EAAA6B,iBAAY,EAAAF,EAAA7B,iBAAiB,GAAGR,KAAKE,6BACvGoC,GAEQA,EAAA7B,SAAS+B,IACdA,EAAQ3B,QAAU2B,IAAY9B,GAC9BV,KAAKmB,qBAAqBqB,EAC9B,GACH,EAMLxC,KAAA+B,sBAAwB,KACf/B,KAAAC,aAAaQ,SAASC,IACnBA,EAASG,SACTb,KAAKmB,qBAAqBT,GACnBwB,OAAAO,oBAAoB,QAASzC,KAAKmC,gBAC7C,GACH,EAOLnC,KAAAmC,eAAkBf,IACIA,EAAME,OACTQ,QAAQ,cACnB9B,KAAK+B,uBACT,EA5GA/B,KAAKD,UAAYA,EACjBC,KAAKO,mBAGE2B,OAAAhB,iBAAiB,QAASlB,KAAKqB,aAC1C,EA2GG,SAASqB,IACN,MAAA3C,EAAY4C,SAAS1B,cAAc,aACpClB,IAAaA,EAAU6C,UAElB7C,EAAA6C,QAAU,IAAI/C,EAAQE,GACpC"}