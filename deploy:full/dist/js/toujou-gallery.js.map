{"version":3,"file":"toujou-gallery.js","sources":["../../../node_modules/photoswipe/dist/photoswipe.esm.js","../../../node_modules/photoswipe/dist/photoswipe-lightbox.esm.js","../../../src/components/toujou-gallery/toujou-gallery.ts"],"sourcesContent":["/*!\r\n  * PhotoSwipe 5.2.8 - https://photoswipe.com\r\n  * (c) 2022 Dmytro Semenov\r\n  */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nfunction roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nfunction clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nfunction setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nfunction decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode();\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {HTMLElement | NodeListOf<HTMLElement> | string} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      this.holderElement.innerHTML = '';\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    this.load();\r\n    this.appendHeavy();\r\n    this.updateContentSize();\r\n\r\n    this.holderElement.innerHTML = '';\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    pswp.currSlide.applyCurrentZoomPan();\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._firstFrameTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._firstFrameTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._firstFrameTimeout) {\r\n      clearTimeout(this._firstFrameTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\n/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nconst arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nconst arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n\r\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\r\n\r\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n    const secondaryIsHigher = (currZoomLevelDiff < 0);\r\n\r\n    if (currZoomLevel === currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, secondaryIsHigher);\r\n    } else if (currZoomLevel > currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, true);\r\n    } else {\r\n      //  if (currZoomLevel < currSlide.zoomLevels.secondary)\r\n      setZoomedIn(template, false);\r\n    }\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nfunction getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.loadImage(isLazy);\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = createElement('pswp__img', 'img');\r\n    this.element = imageElement;\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.slide.container.innerHTML = '';\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n\r\n      // Handle srcset sizes attribute.\r\n      //\r\n      // Never lower quality, if it was increased previously.\r\n      // Chrome does this automatically, Firefox and Safari do not,\r\n      // so we store largest used size in dataset.\r\n      if (image.srcset\r\n          // eslint-disable-next-line max-len\r\n          && (!image.dataset.largestUsedSize || width > parseInt(image.dataset.largestUsedSize, 10))) {\r\n        image.sizes = width + 'px';\r\n        image.dataset.largestUsedSize = String(width);\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerHTML = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      if (this.slide\r\n          && !this.slide.isActive\r\n          && ('decode' in this.element)) {\r\n        this.isDecoding = true;\r\n        // Make sure that we start decoding on the next frame\r\n        requestAnimationFrame(() => {\r\n          // element might change\r\n          if (this.element && this.element.tagName === 'IMG') {\r\n            /** @type {HTMLImageElement} */\r\n            (this.element).decode().then(() => {\r\n              this.isDecoding = false;\r\n              requestAnimationFrame(() => {\r\n                this.appendImage();\r\n              });\r\n            }).catch(() => {\r\n              this.isDecoding = false;\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        if (this.placeholder\r\n          // eslint-disable-next-line max-len\r\n          && (this.state === LOAD_STATE.LOADED || /** @type {LoadState} */ (this.state) === LOAD_STATE.ERROR)\r\n        ) {\r\n          this.removePlaceholder();\r\n        }\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n\r\n      if (this.placeholder\r\n        && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n}\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {string=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {string=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport { PhotoSwipe as default };\r\n//# sourceMappingURL=photoswipe.esm.js.map\r\n","/*!\r\n  * PhotoSwipe Lightbox 5.2.8 - https://photoswipe.com\r\n  * (c) 2022 Dmytro Semenov\r\n  */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {HTMLElement | NodeListOf<HTMLElement> | string} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n */\r\nfunction isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.loadImage(isLazy);\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = createElement('pswp__img', 'img');\r\n    this.element = imageElement;\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.slide.container.innerHTML = '';\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n\r\n      // Handle srcset sizes attribute.\r\n      //\r\n      // Never lower quality, if it was increased previously.\r\n      // Chrome does this automatically, Firefox and Safari do not,\r\n      // so we store largest used size in dataset.\r\n      if (image.srcset\r\n          // eslint-disable-next-line max-len\r\n          && (!image.dataset.largestUsedSize || width > parseInt(image.dataset.largestUsedSize, 10))) {\r\n        image.sizes = width + 'px';\r\n        image.dataset.largestUsedSize = String(width);\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerHTML = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      if (this.slide\r\n          && !this.slide.isActive\r\n          && ('decode' in this.element)) {\r\n        this.isDecoding = true;\r\n        // Make sure that we start decoding on the next frame\r\n        requestAnimationFrame(() => {\r\n          // element might change\r\n          if (this.element && this.element.tagName === 'IMG') {\r\n            /** @type {HTMLImageElement} */\r\n            (this.element).decode().then(() => {\r\n              this.isDecoding = false;\r\n              requestAnimationFrame(() => {\r\n                this.appendImage();\r\n              });\r\n            }).catch(() => {\r\n              this.isDecoding = false;\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        if (this.placeholder\r\n          // eslint-disable-next-line max-len\r\n          && (this.state === LOAD_STATE.LOADED || /** @type {LoadState} */ (this.state) === LOAD_STATE.ERROR)\r\n        ) {\r\n          this.removePlaceholder();\r\n        }\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n\r\n      if (this.placeholder\r\n        && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n}\r\n\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n\r\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp // ... if PhotoSwipe is already open\r\n        || window.navigator.onLine === false) { // ... if offline\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not ideal way to detect them.\r\n    //\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource=} dataSource\r\n   * @param {{ x?: number; y?: number }} [initialPoint]\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp) {\r\n      return false;\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource=} dataSource\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name].forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name].forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = null;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = null;\r\n      window.pswp = null;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    if (this.pswp) {\r\n      this.pswp.destroy();\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = null;\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\r\n\r\nexport { PhotoSwipeLightbox as default };\r\n//# sourceMappingURL=photoswipe-lightbox.esm.js.map\r\n","import { LitElement } from 'lit'\nimport { customElement } from 'lit/decorators.js'\nimport PhotoSwipe from 'photoswipe';\nimport PhotoSwipeLightbox from 'photoswipe/lightbox';\n\n@customElement('toujou-gallery')\nexport class ToujouGallery extends LitElement {\n\n    private lightbox: any;\n\n    // @ts-ignore\n    private get galleryID(): string | undefined {\n        const galleryId = this.getAttribute('id');\n        return galleryId ? `#${galleryId}` : undefined;\n    }\n\n    protected createRenderRoot(): Element | ShadowRoot {\n        return this;\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n\n        this.lightbox = new PhotoSwipeLightbox({\n            gallery: this.galleryID,\n            children: 'a',\n            pswpModule: PhotoSwipe,\n            allowPanToNext: true,\n            preloaderDelay: 0,\n        })\n\n        this.lightbox.on('uiRegister', () => this._handleUiRegister());\n        this.lightbox.init();\n    }\n\n    /**\n     * Register a new UI element: caption\n     */\n    _handleUiRegister = () => {\n        this.lightbox.pswp.ui.registerElement({\n            name: 'caption',\n            order: 9,\n            isButton: false,\n            appendTo: 'root',\n            onInit: (el: HTMLElement) => {\n                this.lightbox.pswp.on('change', () => this._handleChange(el));\n            },\n        });\n    }\n\n    /**\n     * React to change on the lightbox so that we can add the correct caption text\n     * @param {HTMLElement} el\n     */\n    _handleChange = (el: HTMLElement) => {\n        let captionText = '';\n        const currSlideElement = this.lightbox.pswp.currSlide.data.element;\n\n        if (currSlideElement) {\n            captionText = currSlideElement.getAttribute('title');\n        }\n\n        el.textContent = captionText ? captionText : '';\n    }\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'toujou-gallery': ToujouGallery\n    }\n}\n"],"names":["toTransformString","LOAD_STATE","parsePaddingOption","MAX_IMAGE_WIDTH","ZoomLevel","createElement","getPanAreaSize","specialKeyUsed","PhotoSwipeEvent","Eventable","Placeholder","setWidthHeight","Content","PhotoSwipeBase","getElementsFromOption","getViewportSize","lazyLoadData","lazyLoadSlide","LitElement","customElement"],"mappings":"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"}